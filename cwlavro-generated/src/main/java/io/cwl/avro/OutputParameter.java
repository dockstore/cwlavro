/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cwl.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OutputParameter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3550014340579916826L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OutputParameter\",\"namespace\":\"io.cwl.avro\",\"fields\":[{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"'Expression' is not a real type.  It indicates that a field must allow\\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\\nis declared and supported by the platform, the field must also allow\\nJavascript expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"]},{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nProvides a pattern or expression specifying files or directories that\\nmust be included alongside the primary file.  All listed secondary\\nfiles must be present.  An implementation may fail workflow execution\\nif an expected secondary file does not exist.\\n\\nIf the value is an expression, the value of `self` in the expression\\nmust be the primary input or output File object to which this binding\\napplies.  The `basename`, `nameroot` and `nameext` fields must be\\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\\nalso be present.  The expression must return a filename string relative\\nto the path to the primary File, a File or Directory object with either\\n`path` or `location` and `basename` fields set, or an array consisting\\nof strings or File or Directory objects.  It is legal to reference an\\nunchanged File or Directory object taken from input as a secondaryFile.\\n\\nTo work on non-filename-preserving storage systems, portable tool\\ndescriptions should avoid constructing new values from `location`, but\\nshould construct relative references using `basename` or `nameroot`\\ninstead.\\n\\nIf a value in `secondaryFiles` is a string that is not an expression,\\nit specifies that the following pattern should be applied to the path\\nof the primary file to yield a filename relative to the primary File:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"streamable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nA value of `true` indicates that the file is read or written\\nsequentially without seeking.  An implementation may use this flag to\\nindicate whether it is valid to stream file contents using a named\\npipe.  Default: `false`.\\n\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A documentation string for this type, or an array of strings which should be concatenated.\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The unique identifier for this parameter object.\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputParameter\"},{\"name\":\"outputBinding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CommandOutputBinding\",\"doc\":\"Describes how to generate an output parameter based on the files produced\\nby a CommandLineTool.\\n\\nThe output parameter value is generated by applying these operations in the\\nfollowing order:\\n\\n  - glob\\n  - loadContents\\n  - outputEval\\n  - secondaryFiles\\n\",\"fields\":[{\"name\":\"glob\",\"type\":[\"null\",\"string\",\"Expression\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Find files relative to the output directory, using POSIX glob(3)\\npathname matching.  If an array is provided, find files that match any\\npattern in the array.  If an expression is provided, the expression must\\nreturn a string or an array of strings, which will then be evaluated as\\none or more glob patterns.  Must only match and return files which\\nactually exist.\\n\"},{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"For each file matched in `glob`, read up to\\nthe first 64 KiB of text from the file and place it in the `contents`\\nfield of the file object for manipulation by `outputEval`.\\n\",\"jsonldPredicate\":\"cwl:loadContents\"},{\"name\":\"outputEval\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"Evaluate an expression to generate the output value.  If `glob` was\\nspecified, the value of `self` must be an array containing file objects\\nthat were matched.  If no files were matched, `self` must be a zero\\nlength array; if a single file was matched, the value of `self` is an\\narray of a single element.  Additionally, if `loadContents` is `true`,\\nthe File objects must include up to the first 64 KiB of file contents\\nin the `contents` field.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#OutputBinding\"}],\"doc\":\"Describes how to handle the outputs of a process.\\n\",\"jsonldPredicate\":\"cwl:outputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputParameter\"},{\"name\":\"format\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nThis is the file format that will be assigned to\\nthe output parameter.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#format\",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputParameter\"}],\"extends\":\"https://w3id.org/cwl/cwl#Parameter\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OutputParameter> ENCODER =
      new BinaryMessageEncoder<OutputParameter>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OutputParameter> DECODER =
      new BinaryMessageDecoder<OutputParameter>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OutputParameter> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OutputParameter> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OutputParameter> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OutputParameter>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OutputParameter to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OutputParameter from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OutputParameter instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OutputParameter fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** A short, human-readable label of this object. */
   private java.lang.CharSequence label;
  /** Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.
 */
   private java.lang.Object secondaryFiles;
  /** Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.
 */
   private java.lang.Boolean streamable;
  /** A documentation string for this type, or an array of strings which should be concatenated. */
   private java.lang.Object doc;
  /** The unique identifier for this parameter object. */
   private java.lang.CharSequence id;
  /** Describes how to handle the outputs of a process.
 */
   private io.cwl.avro.CommandOutputBinding outputBinding;
  /** Only valid when `type: File` or is an array of `items: File`.

This is the file format that will be assigned to
the output parameter.
 */
   private java.lang.Object format;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OutputParameter() {}

  /**
   * All-args constructor.
   * @param label A short, human-readable label of this object.
   * @param secondaryFiles Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

   * @param streamable Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

   * @param doc A documentation string for this type, or an array of strings which should be concatenated.
   * @param id The unique identifier for this parameter object.
   * @param outputBinding Describes how to handle the outputs of a process.

   * @param format Only valid when `type: File` or is an array of `items: File`.

This is the file format that will be assigned to
the output parameter.

   */
  public OutputParameter(java.lang.CharSequence label, java.lang.Object secondaryFiles, java.lang.Boolean streamable, java.lang.Object doc, java.lang.CharSequence id, io.cwl.avro.CommandOutputBinding outputBinding, java.lang.Object format) {
    this.label = label;
    this.secondaryFiles = secondaryFiles;
    this.streamable = streamable;
    this.doc = doc;
    this.id = id;
    this.outputBinding = outputBinding;
    this.format = format;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return label;
    case 1: return secondaryFiles;
    case 2: return streamable;
    case 3: return doc;
    case 4: return id;
    case 5: return outputBinding;
    case 6: return format;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: label = (java.lang.CharSequence)value$; break;
    case 1: secondaryFiles = value$; break;
    case 2: streamable = (java.lang.Boolean)value$; break;
    case 3: doc = value$; break;
    case 4: id = (java.lang.CharSequence)value$; break;
    case 5: outputBinding = (io.cwl.avro.CommandOutputBinding)value$; break;
    case 6: format = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'label' field.
   * @return A short, human-readable label of this object.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }


  /**
   * Sets the value of the 'label' field.
   * A short, human-readable label of this object.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'secondaryFiles' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

   */
  public java.lang.Object getSecondaryFiles() {
    return secondaryFiles;
  }


  /**
   * Sets the value of the 'secondaryFiles' field.
   * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

   * @param value the value to set.
   */
  public void setSecondaryFiles(java.lang.Object value) {
    this.secondaryFiles = value;
  }

  /**
   * Gets the value of the 'streamable' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

   */
  public java.lang.Boolean getStreamable() {
    return streamable;
  }


  /**
   * Sets the value of the 'streamable' field.
   * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

   * @param value the value to set.
   */
  public void setStreamable(java.lang.Boolean value) {
    this.streamable = value;
  }

  /**
   * Gets the value of the 'doc' field.
   * @return A documentation string for this type, or an array of strings which should be concatenated.
   */
  public java.lang.Object getDoc() {
    return doc;
  }


  /**
   * Sets the value of the 'doc' field.
   * A documentation string for this type, or an array of strings which should be concatenated.
   * @param value the value to set.
   */
  public void setDoc(java.lang.Object value) {
    this.doc = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The unique identifier for this parameter object.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * The unique identifier for this parameter object.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'outputBinding' field.
   * @return Describes how to handle the outputs of a process.

   */
  public io.cwl.avro.CommandOutputBinding getOutputBinding() {
    return outputBinding;
  }


  /**
   * Sets the value of the 'outputBinding' field.
   * Describes how to handle the outputs of a process.

   * @param value the value to set.
   */
  public void setOutputBinding(io.cwl.avro.CommandOutputBinding value) {
    this.outputBinding = value;
  }

  /**
   * Gets the value of the 'format' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

This is the file format that will be assigned to
the output parameter.

   */
  public java.lang.Object getFormat() {
    return format;
  }


  /**
   * Sets the value of the 'format' field.
   * Only valid when `type: File` or is an array of `items: File`.

This is the file format that will be assigned to
the output parameter.

   * @param value the value to set.
   */
  public void setFormat(java.lang.Object value) {
    this.format = value;
  }

  /**
   * Creates a new OutputParameter RecordBuilder.
   * @return A new OutputParameter RecordBuilder
   */
  public static io.cwl.avro.OutputParameter.Builder newBuilder() {
    return new io.cwl.avro.OutputParameter.Builder();
  }

  /**
   * Creates a new OutputParameter RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OutputParameter RecordBuilder
   */
  public static io.cwl.avro.OutputParameter.Builder newBuilder(io.cwl.avro.OutputParameter.Builder other) {
    if (other == null) {
      return new io.cwl.avro.OutputParameter.Builder();
    } else {
      return new io.cwl.avro.OutputParameter.Builder(other);
    }
  }

  /**
   * Creates a new OutputParameter RecordBuilder by copying an existing OutputParameter instance.
   * @param other The existing instance to copy.
   * @return A new OutputParameter RecordBuilder
   */
  public static io.cwl.avro.OutputParameter.Builder newBuilder(io.cwl.avro.OutputParameter other) {
    if (other == null) {
      return new io.cwl.avro.OutputParameter.Builder();
    } else {
      return new io.cwl.avro.OutputParameter.Builder(other);
    }
  }

  /**
   * RecordBuilder for OutputParameter instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OutputParameter>
    implements org.apache.avro.data.RecordBuilder<OutputParameter> {

    /** A short, human-readable label of this object. */
    private java.lang.CharSequence label;
    /** Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.
 */
    private java.lang.Object secondaryFiles;
    /** Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.
 */
    private java.lang.Boolean streamable;
    /** A documentation string for this type, or an array of strings which should be concatenated. */
    private java.lang.Object doc;
    /** The unique identifier for this parameter object. */
    private java.lang.CharSequence id;
    /** Describes how to handle the outputs of a process.
 */
    private io.cwl.avro.CommandOutputBinding outputBinding;
    private io.cwl.avro.CommandOutputBinding.Builder outputBindingBuilder;
    /** Only valid when `type: File` or is an array of `items: File`.

This is the file format that will be assigned to
the output parameter.
 */
    private java.lang.Object format;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cwl.avro.OutputParameter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.secondaryFiles)) {
        this.secondaryFiles = data().deepCopy(fields()[1].schema(), other.secondaryFiles);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.streamable)) {
        this.streamable = data().deepCopy(fields()[2].schema(), other.streamable);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.doc)) {
        this.doc = data().deepCopy(fields()[3].schema(), other.doc);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.id)) {
        this.id = data().deepCopy(fields()[4].schema(), other.id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.outputBinding)) {
        this.outputBinding = data().deepCopy(fields()[5].schema(), other.outputBinding);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasOutputBindingBuilder()) {
        this.outputBindingBuilder = io.cwl.avro.CommandOutputBinding.newBuilder(other.getOutputBindingBuilder());
      }
      if (isValidValue(fields()[6], other.format)) {
        this.format = data().deepCopy(fields()[6].schema(), other.format);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing OutputParameter instance
     * @param other The existing instance to copy.
     */
    private Builder(io.cwl.avro.OutputParameter other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.secondaryFiles)) {
        this.secondaryFiles = data().deepCopy(fields()[1].schema(), other.secondaryFiles);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.streamable)) {
        this.streamable = data().deepCopy(fields()[2].schema(), other.streamable);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.doc)) {
        this.doc = data().deepCopy(fields()[3].schema(), other.doc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.id)) {
        this.id = data().deepCopy(fields()[4].schema(), other.id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.outputBinding)) {
        this.outputBinding = data().deepCopy(fields()[5].schema(), other.outputBinding);
        fieldSetFlags()[5] = true;
      }
      this.outputBindingBuilder = null;
      if (isValidValue(fields()[6], other.format)) {
        this.format = data().deepCopy(fields()[6].schema(), other.format);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'label' field.
      * A short, human-readable label of this object.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }


    /**
      * Sets the value of the 'label' field.
      * A short, human-readable label of this object.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.label = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * A short, human-readable label of this object.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'label' field.
      * A short, human-readable label of this object.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder clearLabel() {
      label = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'secondaryFiles' field.
      * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @return The value.
      */
    public java.lang.Object getSecondaryFiles() {
      return secondaryFiles;
    }


    /**
      * Sets the value of the 'secondaryFiles' field.
      * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @param value The value of 'secondaryFiles'.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder setSecondaryFiles(java.lang.Object value) {
      validate(fields()[1], value);
      this.secondaryFiles = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'secondaryFiles' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @return True if the 'secondaryFiles' field has been set, false otherwise.
      */
    public boolean hasSecondaryFiles() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'secondaryFiles' field.
      * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder clearSecondaryFiles() {
      secondaryFiles = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamable' field.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @return The value.
      */
    public java.lang.Boolean getStreamable() {
      return streamable;
    }


    /**
      * Sets the value of the 'streamable' field.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @param value The value of 'streamable'.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder setStreamable(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.streamable = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'streamable' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @return True if the 'streamable' field has been set, false otherwise.
      */
    public boolean hasStreamable() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'streamable' field.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder clearStreamable() {
      streamable = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'doc' field.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @return The value.
      */
    public java.lang.Object getDoc() {
      return doc;
    }


    /**
      * Sets the value of the 'doc' field.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @param value The value of 'doc'.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder setDoc(java.lang.Object value) {
      validate(fields()[3], value);
      this.doc = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'doc' field has been set.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @return True if the 'doc' field has been set, false otherwise.
      */
    public boolean hasDoc() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'doc' field.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder clearDoc() {
      doc = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * The unique identifier for this parameter object.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * The unique identifier for this parameter object.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder setId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * The unique identifier for this parameter object.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'id' field.
      * The unique identifier for this parameter object.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder clearId() {
      id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'outputBinding' field.
      * Describes how to handle the outputs of a process.

      * @return The value.
      */
    public io.cwl.avro.CommandOutputBinding getOutputBinding() {
      return outputBinding;
    }


    /**
      * Sets the value of the 'outputBinding' field.
      * Describes how to handle the outputs of a process.

      * @param value The value of 'outputBinding'.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder setOutputBinding(io.cwl.avro.CommandOutputBinding value) {
      validate(fields()[5], value);
      this.outputBindingBuilder = null;
      this.outputBinding = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'outputBinding' field has been set.
      * Describes how to handle the outputs of a process.

      * @return True if the 'outputBinding' field has been set, false otherwise.
      */
    public boolean hasOutputBinding() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'outputBinding' field and creates one if it doesn't exist yet.
     * Describes how to handle the outputs of a process.

     * @return This builder.
     */
    public io.cwl.avro.CommandOutputBinding.Builder getOutputBindingBuilder() {
      if (outputBindingBuilder == null) {
        if (hasOutputBinding()) {
          setOutputBindingBuilder(io.cwl.avro.CommandOutputBinding.newBuilder(outputBinding));
        } else {
          setOutputBindingBuilder(io.cwl.avro.CommandOutputBinding.newBuilder());
        }
      }
      return outputBindingBuilder;
    }

    /**
     * Sets the Builder instance for the 'outputBinding' field
     * Describes how to handle the outputs of a process.

     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.cwl.avro.OutputParameter.Builder setOutputBindingBuilder(io.cwl.avro.CommandOutputBinding.Builder value) {
      clearOutputBinding();
      outputBindingBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'outputBinding' field has an active Builder instance
     * Describes how to handle the outputs of a process.

     * @return True if the 'outputBinding' field has an active Builder instance
     */
    public boolean hasOutputBindingBuilder() {
      return outputBindingBuilder != null;
    }

    /**
      * Clears the value of the 'outputBinding' field.
      * Describes how to handle the outputs of a process.

      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder clearOutputBinding() {
      outputBinding = null;
      outputBindingBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'format' field.
      * Only valid when `type: File` or is an array of `items: File`.

This is the file format that will be assigned to
the output parameter.

      * @return The value.
      */
    public java.lang.Object getFormat() {
      return format;
    }


    /**
      * Sets the value of the 'format' field.
      * Only valid when `type: File` or is an array of `items: File`.

This is the file format that will be assigned to
the output parameter.

      * @param value The value of 'format'.
      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder setFormat(java.lang.Object value) {
      validate(fields()[6], value);
      this.format = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'format' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

This is the file format that will be assigned to
the output parameter.

      * @return True if the 'format' field has been set, false otherwise.
      */
    public boolean hasFormat() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'format' field.
      * Only valid when `type: File` or is an array of `items: File`.

This is the file format that will be assigned to
the output parameter.

      * @return This builder.
      */
    public io.cwl.avro.OutputParameter.Builder clearFormat() {
      format = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OutputParameter build() {
      try {
        OutputParameter record = new OutputParameter();
        record.label = fieldSetFlags()[0] ? this.label : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.secondaryFiles = fieldSetFlags()[1] ? this.secondaryFiles :  defaultValue(fields()[1]);
        record.streamable = fieldSetFlags()[2] ? this.streamable : (java.lang.Boolean) defaultValue(fields()[2]);
        record.doc = fieldSetFlags()[3] ? this.doc :  defaultValue(fields()[3]);
        record.id = fieldSetFlags()[4] ? this.id : (java.lang.CharSequence) defaultValue(fields()[4]);
        if (outputBindingBuilder != null) {
          try {
            record.outputBinding = this.outputBindingBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("outputBinding"));
            throw e;
          }
        } else {
          record.outputBinding = fieldSetFlags()[5] ? this.outputBinding : (io.cwl.avro.CommandOutputBinding) defaultValue(fields()[5]);
        }
        record.format = fieldSetFlags()[6] ? this.format :  defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OutputParameter>
    WRITER$ = (org.apache.avro.io.DatumWriter<OutputParameter>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OutputParameter>
    READER$ = (org.apache.avro.io.DatumReader<OutputParameter>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










