/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cwl.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** 
When listed under `inputBinding` in the input schema, the term
"value" refers to the the corresponding value in the input object.  For
binding objects listed in `CommandLineTool.arguments`, the term "value"
refers to the effective value after evaluating `valueFrom`.

The binding behavior when building the command line depends on the data
type of the value.  If there is a mismatch between the type described by
the input schema and the effective value, such as resulting from an
expression evaluation, an implementation must use the data type of the
effective value.

  - **string**: Add `prefix` and the string to the command line.

  - **number**: Add `prefix` and decimal representation to command line.

  - **boolean**: If true, add `prefix` to the command line.  If false, add
      nothing.

  - **File**: Add `prefix` and the value of
    [`File.path`](#File) to the command line.

  - **Directory**: Add `prefix` and the value of
    [`Directory.path`](#Directory) to the command line.

  - **array**: If `itemSeparator` is specified, add `prefix` and the join
      the array into a single string with `itemSeparator` separating the
      items.  Otherwise first add `prefix`, then recursively process
      individual elements.
      If the array is empty, it does not add anything to command line.

  - **object**: Add `prefix` only, and recursively add object fields for
      which `inputBinding` is specified.

  - **null**: Add nothing.
 */
@org.apache.avro.specific.AvroGenerated
public class CommandLineBinding extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6314974120753167026L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommandLineBinding\",\"namespace\":\"io.cwl.avro\",\"doc\":\"\\nWhen listed under `inputBinding` in the input schema, the term\\n\\\"value\\\" refers to the the corresponding value in the input object.  For\\nbinding objects listed in `CommandLineTool.arguments`, the term \\\"value\\\"\\nrefers to the effective value after evaluating `valueFrom`.\\n\\nThe binding behavior when building the command line depends on the data\\ntype of the value.  If there is a mismatch between the type described by\\nthe input schema and the effective value, such as resulting from an\\nexpression evaluation, an implementation must use the data type of the\\neffective value.\\n\\n  - **string**: Add `prefix` and the string to the command line.\\n\\n  - **number**: Add `prefix` and decimal representation to command line.\\n\\n  - **boolean**: If true, add `prefix` to the command line.  If false, add\\n      nothing.\\n\\n  - **File**: Add `prefix` and the value of\\n    [`File.path`](#File) to the command line.\\n\\n  - **Directory**: Add `prefix` and the value of\\n    [`Directory.path`](#Directory) to the command line.\\n\\n  - **array**: If `itemSeparator` is specified, add `prefix` and the join\\n      the array into a single string with `itemSeparator` separating the\\n      items.  Otherwise first add `prefix`, then recursively process\\n      individual elements.\\n      If the array is empty, it does not add anything to command line.\\n\\n  - **object**: Add `prefix` only, and recursively add object fields for\\n      which `inputBinding` is specified.\\n\\n  - **null**: Add nothing.\\n\",\"fields\":[{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nRead up to the first 64 KiB of text from the file and place it in the\\n\\\"contents\\\" field of the file object for use by expressions.\\n\",\"jsonldPredicate\":\"cwl:loadContents\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputBinding\"},{\"name\":\"position\",\"type\":[\"null\",\"int\"],\"doc\":\"The sorting key.  Default position is 0.\"},{\"name\":\"prefix\",\"type\":[\"null\",\"string\"],\"doc\":\"Command line prefix to add before the value.\"},{\"name\":\"separate\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true (default), then the prefix and value must be added as separate\\ncommand line arguments; if false, prefix and value must be concatenated\\ninto a single command line argument.\\n\"},{\"name\":\"itemSeparator\",\"type\":[\"null\",\"string\"],\"doc\":\"Join the array elements into a single string with the elements\\nseparated by by `itemSeparator`.\\n\"},{\"name\":\"valueFrom\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"'Expression' is not a real type.  It indicates that a field must allow\\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\\nis declared and supported by the platform, the field must also allow\\nJavascript expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"]}],\"doc\":\"If `valueFrom` is a constant string value, use this as the value and\\napply the binding rules above.\\n\\nIf `valueFrom` is an expression, evaluate the expression to yield the\\nactual value to use to build the command line and apply the binding\\nrules above.  If the inputBinding is associated with an input\\nparameter, the value of `self` in the expression will be the value of\\nthe input parameter.  Input parameter defaults (as specified by the\\n`InputParameter.default` field) must be applied before evaluating the\\nexpression.\\n\\nWhen a binding is part of the `CommandLineTool.arguments` field,\\nthe `valueFrom` field is required.\\n\",\"jsonldPredicate\":\"cwl:valueFrom\"},{\"name\":\"shellQuote\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If `ShellCommandRequirement` is in the requirements for the current command,\\nthis controls whether the value is quoted on the command line (default is true).\\nUse `shellQuote: false` to inject metacharacters for operations such as pipes.\\n\\nIf `shellQuote` is true or not provided, the implementation must not\\npermit interpretation of any shell metacharacters or directives.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputBinding\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CommandLineBinding> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CommandLineBinding> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CommandLineBinding> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CommandLineBinding> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CommandLineBinding> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CommandLineBinding to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CommandLineBinding from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CommandLineBinding instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CommandLineBinding fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Only valid when `type: File` or is an array of `items: File`.

Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for use by expressions.
 */
  private java.lang.Boolean loadContents;
  /** The sorting key.  Default position is 0. */
  private java.lang.Integer position;
  /** Command line prefix to add before the value. */
  private java.lang.CharSequence prefix;
  /** If true (default), then the prefix and value must be added as separate
command line arguments; if false, prefix and value must be concatenated
into a single command line argument.
 */
  private java.lang.Boolean separate;
  /** Join the array elements into a single string with the elements
separated by by `itemSeparator`.
 */
  private java.lang.CharSequence itemSeparator;
  /** If `valueFrom` is a constant string value, use this as the value and
apply the binding rules above.

If `valueFrom` is an expression, evaluate the expression to yield the
actual value to use to build the command line and apply the binding
rules above.  If the inputBinding is associated with an input
parameter, the value of `self` in the expression will be the value of
the input parameter.  Input parameter defaults (as specified by the
`InputParameter.default` field) must be applied before evaluating the
expression.

When a binding is part of the `CommandLineTool.arguments` field,
the `valueFrom` field is required.
 */
  private java.lang.Object valueFrom;
  /** If `ShellCommandRequirement` is in the requirements for the current command,
this controls whether the value is quoted on the command line (default is true).
Use `shellQuote: false` to inject metacharacters for operations such as pipes.

If `shellQuote` is true or not provided, the implementation must not
permit interpretation of any shell metacharacters or directives.
 */
  private java.lang.Boolean shellQuote;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommandLineBinding() {}

  /**
   * All-args constructor.
   * @param loadContents Only valid when `type: File` or is an array of `items: File`.

Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for use by expressions.

   * @param position The sorting key.  Default position is 0.
   * @param prefix Command line prefix to add before the value.
   * @param separate If true (default), then the prefix and value must be added as separate
command line arguments; if false, prefix and value must be concatenated
into a single command line argument.

   * @param itemSeparator Join the array elements into a single string with the elements
separated by by `itemSeparator`.

   * @param valueFrom If `valueFrom` is a constant string value, use this as the value and
apply the binding rules above.

If `valueFrom` is an expression, evaluate the expression to yield the
actual value to use to build the command line and apply the binding
rules above.  If the inputBinding is associated with an input
parameter, the value of `self` in the expression will be the value of
the input parameter.  Input parameter defaults (as specified by the
`InputParameter.default` field) must be applied before evaluating the
expression.

When a binding is part of the `CommandLineTool.arguments` field,
the `valueFrom` field is required.

   * @param shellQuote If `ShellCommandRequirement` is in the requirements for the current command,
this controls whether the value is quoted on the command line (default is true).
Use `shellQuote: false` to inject metacharacters for operations such as pipes.

If `shellQuote` is true or not provided, the implementation must not
permit interpretation of any shell metacharacters or directives.

   */
  public CommandLineBinding(java.lang.Boolean loadContents, java.lang.Integer position, java.lang.CharSequence prefix, java.lang.Boolean separate, java.lang.CharSequence itemSeparator, java.lang.Object valueFrom, java.lang.Boolean shellQuote) {
    this.loadContents = loadContents;
    this.position = position;
    this.prefix = prefix;
    this.separate = separate;
    this.itemSeparator = itemSeparator;
    this.valueFrom = valueFrom;
    this.shellQuote = shellQuote;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return loadContents;
    case 1: return position;
    case 2: return prefix;
    case 3: return separate;
    case 4: return itemSeparator;
    case 5: return valueFrom;
    case 6: return shellQuote;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: loadContents = (java.lang.Boolean)value$; break;
    case 1: position = (java.lang.Integer)value$; break;
    case 2: prefix = (java.lang.CharSequence)value$; break;
    case 3: separate = (java.lang.Boolean)value$; break;
    case 4: itemSeparator = (java.lang.CharSequence)value$; break;
    case 5: valueFrom = value$; break;
    case 6: shellQuote = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'loadContents' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for use by expressions.

   */
  public java.lang.Boolean getLoadContents() {
    return loadContents;
  }


  /**
   * Sets the value of the 'loadContents' field.
   * Only valid when `type: File` or is an array of `items: File`.

Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for use by expressions.

   * @param value the value to set.
   */
  public void setLoadContents(java.lang.Boolean value) {
    this.loadContents = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return The sorting key.  Default position is 0.
   */
  public java.lang.Integer getPosition() {
    return position;
  }


  /**
   * Sets the value of the 'position' field.
   * The sorting key.  Default position is 0.
   * @param value the value to set.
   */
  public void setPosition(java.lang.Integer value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'prefix' field.
   * @return Command line prefix to add before the value.
   */
  public java.lang.CharSequence getPrefix() {
    return prefix;
  }


  /**
   * Sets the value of the 'prefix' field.
   * Command line prefix to add before the value.
   * @param value the value to set.
   */
  public void setPrefix(java.lang.CharSequence value) {
    this.prefix = value;
  }

  /**
   * Gets the value of the 'separate' field.
   * @return If true (default), then the prefix and value must be added as separate
command line arguments; if false, prefix and value must be concatenated
into a single command line argument.

   */
  public java.lang.Boolean getSeparate() {
    return separate;
  }


  /**
   * Sets the value of the 'separate' field.
   * If true (default), then the prefix and value must be added as separate
command line arguments; if false, prefix and value must be concatenated
into a single command line argument.

   * @param value the value to set.
   */
  public void setSeparate(java.lang.Boolean value) {
    this.separate = value;
  }

  /**
   * Gets the value of the 'itemSeparator' field.
   * @return Join the array elements into a single string with the elements
separated by by `itemSeparator`.

   */
  public java.lang.CharSequence getItemSeparator() {
    return itemSeparator;
  }


  /**
   * Sets the value of the 'itemSeparator' field.
   * Join the array elements into a single string with the elements
separated by by `itemSeparator`.

   * @param value the value to set.
   */
  public void setItemSeparator(java.lang.CharSequence value) {
    this.itemSeparator = value;
  }

  /**
   * Gets the value of the 'valueFrom' field.
   * @return If `valueFrom` is a constant string value, use this as the value and
apply the binding rules above.

If `valueFrom` is an expression, evaluate the expression to yield the
actual value to use to build the command line and apply the binding
rules above.  If the inputBinding is associated with an input
parameter, the value of `self` in the expression will be the value of
the input parameter.  Input parameter defaults (as specified by the
`InputParameter.default` field) must be applied before evaluating the
expression.

When a binding is part of the `CommandLineTool.arguments` field,
the `valueFrom` field is required.

   */
  public java.lang.Object getValueFrom() {
    return valueFrom;
  }


  /**
   * Sets the value of the 'valueFrom' field.
   * If `valueFrom` is a constant string value, use this as the value and
apply the binding rules above.

If `valueFrom` is an expression, evaluate the expression to yield the
actual value to use to build the command line and apply the binding
rules above.  If the inputBinding is associated with an input
parameter, the value of `self` in the expression will be the value of
the input parameter.  Input parameter defaults (as specified by the
`InputParameter.default` field) must be applied before evaluating the
expression.

When a binding is part of the `CommandLineTool.arguments` field,
the `valueFrom` field is required.

   * @param value the value to set.
   */
  public void setValueFrom(java.lang.Object value) {
    this.valueFrom = value;
  }

  /**
   * Gets the value of the 'shellQuote' field.
   * @return If `ShellCommandRequirement` is in the requirements for the current command,
this controls whether the value is quoted on the command line (default is true).
Use `shellQuote: false` to inject metacharacters for operations such as pipes.

If `shellQuote` is true or not provided, the implementation must not
permit interpretation of any shell metacharacters or directives.

   */
  public java.lang.Boolean getShellQuote() {
    return shellQuote;
  }


  /**
   * Sets the value of the 'shellQuote' field.
   * If `ShellCommandRequirement` is in the requirements for the current command,
this controls whether the value is quoted on the command line (default is true).
Use `shellQuote: false` to inject metacharacters for operations such as pipes.

If `shellQuote` is true or not provided, the implementation must not
permit interpretation of any shell metacharacters or directives.

   * @param value the value to set.
   */
  public void setShellQuote(java.lang.Boolean value) {
    this.shellQuote = value;
  }

  /**
   * Creates a new CommandLineBinding RecordBuilder.
   * @return A new CommandLineBinding RecordBuilder
   */
  public static io.cwl.avro.CommandLineBinding.Builder newBuilder() {
    return new io.cwl.avro.CommandLineBinding.Builder();
  }

  /**
   * Creates a new CommandLineBinding RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommandLineBinding RecordBuilder
   */
  public static io.cwl.avro.CommandLineBinding.Builder newBuilder(io.cwl.avro.CommandLineBinding.Builder other) {
    if (other == null) {
      return new io.cwl.avro.CommandLineBinding.Builder();
    } else {
      return new io.cwl.avro.CommandLineBinding.Builder(other);
    }
  }

  /**
   * Creates a new CommandLineBinding RecordBuilder by copying an existing CommandLineBinding instance.
   * @param other The existing instance to copy.
   * @return A new CommandLineBinding RecordBuilder
   */
  public static io.cwl.avro.CommandLineBinding.Builder newBuilder(io.cwl.avro.CommandLineBinding other) {
    if (other == null) {
      return new io.cwl.avro.CommandLineBinding.Builder();
    } else {
      return new io.cwl.avro.CommandLineBinding.Builder(other);
    }
  }

  /**
   * RecordBuilder for CommandLineBinding instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommandLineBinding>
    implements org.apache.avro.data.RecordBuilder<CommandLineBinding> {

    /** Only valid when `type: File` or is an array of `items: File`.

Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for use by expressions.
 */
    private java.lang.Boolean loadContents;
    /** The sorting key.  Default position is 0. */
    private java.lang.Integer position;
    /** Command line prefix to add before the value. */
    private java.lang.CharSequence prefix;
    /** If true (default), then the prefix and value must be added as separate
command line arguments; if false, prefix and value must be concatenated
into a single command line argument.
 */
    private java.lang.Boolean separate;
    /** Join the array elements into a single string with the elements
separated by by `itemSeparator`.
 */
    private java.lang.CharSequence itemSeparator;
    /** If `valueFrom` is a constant string value, use this as the value and
apply the binding rules above.

If `valueFrom` is an expression, evaluate the expression to yield the
actual value to use to build the command line and apply the binding
rules above.  If the inputBinding is associated with an input
parameter, the value of `self` in the expression will be the value of
the input parameter.  Input parameter defaults (as specified by the
`InputParameter.default` field) must be applied before evaluating the
expression.

When a binding is part of the `CommandLineTool.arguments` field,
the `valueFrom` field is required.
 */
    private java.lang.Object valueFrom;
    /** If `ShellCommandRequirement` is in the requirements for the current command,
this controls whether the value is quoted on the command line (default is true).
Use `shellQuote: false` to inject metacharacters for operations such as pipes.

If `shellQuote` is true or not provided, the implementation must not
permit interpretation of any shell metacharacters or directives.
 */
    private java.lang.Boolean shellQuote;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cwl.avro.CommandLineBinding.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.loadContents)) {
        this.loadContents = data().deepCopy(fields()[0].schema(), other.loadContents);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.prefix)) {
        this.prefix = data().deepCopy(fields()[2].schema(), other.prefix);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.separate)) {
        this.separate = data().deepCopy(fields()[3].schema(), other.separate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.itemSeparator)) {
        this.itemSeparator = data().deepCopy(fields()[4].schema(), other.itemSeparator);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.valueFrom)) {
        this.valueFrom = data().deepCopy(fields()[5].schema(), other.valueFrom);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.shellQuote)) {
        this.shellQuote = data().deepCopy(fields()[6].schema(), other.shellQuote);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing CommandLineBinding instance
     * @param other The existing instance to copy.
     */
    private Builder(io.cwl.avro.CommandLineBinding other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.loadContents)) {
        this.loadContents = data().deepCopy(fields()[0].schema(), other.loadContents);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.prefix)) {
        this.prefix = data().deepCopy(fields()[2].schema(), other.prefix);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.separate)) {
        this.separate = data().deepCopy(fields()[3].schema(), other.separate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.itemSeparator)) {
        this.itemSeparator = data().deepCopy(fields()[4].schema(), other.itemSeparator);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.valueFrom)) {
        this.valueFrom = data().deepCopy(fields()[5].schema(), other.valueFrom);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.shellQuote)) {
        this.shellQuote = data().deepCopy(fields()[6].schema(), other.shellQuote);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'loadContents' field.
      * Only valid when `type: File` or is an array of `items: File`.

Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for use by expressions.

      * @return The value.
      */
    public java.lang.Boolean getLoadContents() {
      return loadContents;
    }


    /**
      * Sets the value of the 'loadContents' field.
      * Only valid when `type: File` or is an array of `items: File`.

Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for use by expressions.

      * @param value The value of 'loadContents'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder setLoadContents(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.loadContents = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'loadContents' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for use by expressions.

      * @return True if the 'loadContents' field has been set, false otherwise.
      */
    public boolean hasLoadContents() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'loadContents' field.
      * Only valid when `type: File` or is an array of `items: File`.

Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for use by expressions.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder clearLoadContents() {
      loadContents = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * The sorting key.  Default position is 0.
      * @return The value.
      */
    public java.lang.Integer getPosition() {
      return position;
    }


    /**
      * Sets the value of the 'position' field.
      * The sorting key.  Default position is 0.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder setPosition(java.lang.Integer value) {
      validate(fields()[1], value);
      this.position = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * The sorting key.  Default position is 0.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'position' field.
      * The sorting key.  Default position is 0.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder clearPosition() {
      position = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'prefix' field.
      * Command line prefix to add before the value.
      * @return The value.
      */
    public java.lang.CharSequence getPrefix() {
      return prefix;
    }


    /**
      * Sets the value of the 'prefix' field.
      * Command line prefix to add before the value.
      * @param value The value of 'prefix'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder setPrefix(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.prefix = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'prefix' field has been set.
      * Command line prefix to add before the value.
      * @return True if the 'prefix' field has been set, false otherwise.
      */
    public boolean hasPrefix() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'prefix' field.
      * Command line prefix to add before the value.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder clearPrefix() {
      prefix = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'separate' field.
      * If true (default), then the prefix and value must be added as separate
command line arguments; if false, prefix and value must be concatenated
into a single command line argument.

      * @return The value.
      */
    public java.lang.Boolean getSeparate() {
      return separate;
    }


    /**
      * Sets the value of the 'separate' field.
      * If true (default), then the prefix and value must be added as separate
command line arguments; if false, prefix and value must be concatenated
into a single command line argument.

      * @param value The value of 'separate'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder setSeparate(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.separate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'separate' field has been set.
      * If true (default), then the prefix and value must be added as separate
command line arguments; if false, prefix and value must be concatenated
into a single command line argument.

      * @return True if the 'separate' field has been set, false otherwise.
      */
    public boolean hasSeparate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'separate' field.
      * If true (default), then the prefix and value must be added as separate
command line arguments; if false, prefix and value must be concatenated
into a single command line argument.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder clearSeparate() {
      separate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemSeparator' field.
      * Join the array elements into a single string with the elements
separated by by `itemSeparator`.

      * @return The value.
      */
    public java.lang.CharSequence getItemSeparator() {
      return itemSeparator;
    }


    /**
      * Sets the value of the 'itemSeparator' field.
      * Join the array elements into a single string with the elements
separated by by `itemSeparator`.

      * @param value The value of 'itemSeparator'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder setItemSeparator(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.itemSeparator = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'itemSeparator' field has been set.
      * Join the array elements into a single string with the elements
separated by by `itemSeparator`.

      * @return True if the 'itemSeparator' field has been set, false otherwise.
      */
    public boolean hasItemSeparator() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'itemSeparator' field.
      * Join the array elements into a single string with the elements
separated by by `itemSeparator`.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder clearItemSeparator() {
      itemSeparator = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueFrom' field.
      * If `valueFrom` is a constant string value, use this as the value and
apply the binding rules above.

If `valueFrom` is an expression, evaluate the expression to yield the
actual value to use to build the command line and apply the binding
rules above.  If the inputBinding is associated with an input
parameter, the value of `self` in the expression will be the value of
the input parameter.  Input parameter defaults (as specified by the
`InputParameter.default` field) must be applied before evaluating the
expression.

When a binding is part of the `CommandLineTool.arguments` field,
the `valueFrom` field is required.

      * @return The value.
      */
    public java.lang.Object getValueFrom() {
      return valueFrom;
    }


    /**
      * Sets the value of the 'valueFrom' field.
      * If `valueFrom` is a constant string value, use this as the value and
apply the binding rules above.

If `valueFrom` is an expression, evaluate the expression to yield the
actual value to use to build the command line and apply the binding
rules above.  If the inputBinding is associated with an input
parameter, the value of `self` in the expression will be the value of
the input parameter.  Input parameter defaults (as specified by the
`InputParameter.default` field) must be applied before evaluating the
expression.

When a binding is part of the `CommandLineTool.arguments` field,
the `valueFrom` field is required.

      * @param value The value of 'valueFrom'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder setValueFrom(java.lang.Object value) {
      validate(fields()[5], value);
      this.valueFrom = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'valueFrom' field has been set.
      * If `valueFrom` is a constant string value, use this as the value and
apply the binding rules above.

If `valueFrom` is an expression, evaluate the expression to yield the
actual value to use to build the command line and apply the binding
rules above.  If the inputBinding is associated with an input
parameter, the value of `self` in the expression will be the value of
the input parameter.  Input parameter defaults (as specified by the
`InputParameter.default` field) must be applied before evaluating the
expression.

When a binding is part of the `CommandLineTool.arguments` field,
the `valueFrom` field is required.

      * @return True if the 'valueFrom' field has been set, false otherwise.
      */
    public boolean hasValueFrom() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'valueFrom' field.
      * If `valueFrom` is a constant string value, use this as the value and
apply the binding rules above.

If `valueFrom` is an expression, evaluate the expression to yield the
actual value to use to build the command line and apply the binding
rules above.  If the inputBinding is associated with an input
parameter, the value of `self` in the expression will be the value of
the input parameter.  Input parameter defaults (as specified by the
`InputParameter.default` field) must be applied before evaluating the
expression.

When a binding is part of the `CommandLineTool.arguments` field,
the `valueFrom` field is required.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder clearValueFrom() {
      valueFrom = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'shellQuote' field.
      * If `ShellCommandRequirement` is in the requirements for the current command,
this controls whether the value is quoted on the command line (default is true).
Use `shellQuote: false` to inject metacharacters for operations such as pipes.

If `shellQuote` is true or not provided, the implementation must not
permit interpretation of any shell metacharacters or directives.

      * @return The value.
      */
    public java.lang.Boolean getShellQuote() {
      return shellQuote;
    }


    /**
      * Sets the value of the 'shellQuote' field.
      * If `ShellCommandRequirement` is in the requirements for the current command,
this controls whether the value is quoted on the command line (default is true).
Use `shellQuote: false` to inject metacharacters for operations such as pipes.

If `shellQuote` is true or not provided, the implementation must not
permit interpretation of any shell metacharacters or directives.

      * @param value The value of 'shellQuote'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder setShellQuote(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.shellQuote = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'shellQuote' field has been set.
      * If `ShellCommandRequirement` is in the requirements for the current command,
this controls whether the value is quoted on the command line (default is true).
Use `shellQuote: false` to inject metacharacters for operations such as pipes.

If `shellQuote` is true or not provided, the implementation must not
permit interpretation of any shell metacharacters or directives.

      * @return True if the 'shellQuote' field has been set, false otherwise.
      */
    public boolean hasShellQuote() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'shellQuote' field.
      * If `ShellCommandRequirement` is in the requirements for the current command,
this controls whether the value is quoted on the command line (default is true).
Use `shellQuote: false` to inject metacharacters for operations such as pipes.

If `shellQuote` is true or not provided, the implementation must not
permit interpretation of any shell metacharacters or directives.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineBinding.Builder clearShellQuote() {
      shellQuote = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CommandLineBinding build() {
      try {
        CommandLineBinding record = new CommandLineBinding();
        record.loadContents = fieldSetFlags()[0] ? this.loadContents : (java.lang.Boolean) defaultValue(fields()[0]);
        record.position = fieldSetFlags()[1] ? this.position : (java.lang.Integer) defaultValue(fields()[1]);
        record.prefix = fieldSetFlags()[2] ? this.prefix : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.separate = fieldSetFlags()[3] ? this.separate : (java.lang.Boolean) defaultValue(fields()[3]);
        record.itemSeparator = fieldSetFlags()[4] ? this.itemSeparator : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.valueFrom = fieldSetFlags()[5] ? this.valueFrom :  defaultValue(fields()[5]);
        record.shellQuote = fieldSetFlags()[6] ? this.shellQuote : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CommandLineBinding>
    WRITER$ = (org.apache.avro.io.DatumWriter<CommandLineBinding>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CommandLineBinding>
    READER$ = (org.apache.avro.io.DatumReader<CommandLineBinding>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










