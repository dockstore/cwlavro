/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cwl.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Define an enumerated type.
 */
@org.apache.avro.specific.AvroGenerated
public class EnumSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8842608702682104080L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnumSchema\",\"namespace\":\"io.cwl.avro\",\"doc\":\"Define an enumerated type.\\n\",\"fields\":[{\"name\":\"symbols\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Enum_symbol\",\"namespace\":\"io.cwl.avro.EnumSchemaPackage.type\",\"symbols\":[\"enum\"]},\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EnumSchema> ENCODER =
      new BinaryMessageEncoder<EnumSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EnumSchema> DECODER =
      new BinaryMessageDecoder<EnumSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EnumSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EnumSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EnumSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EnumSchema>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EnumSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EnumSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EnumSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EnumSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Defines the set of valid symbols. */
   private java.util.List<java.lang.CharSequence> symbols;
  /** Must be `enum` */
   private io.cwl.avro.EnumSchemaPackage.type.Enum_symbol type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnumSchema() {}

  /**
   * All-args constructor.
   * @param symbols Defines the set of valid symbols.
   * @param type Must be `enum`
   */
  public EnumSchema(java.util.List<java.lang.CharSequence> symbols, io.cwl.avro.EnumSchemaPackage.type.Enum_symbol type) {
    this.symbols = symbols;
    this.type = type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return symbols;
    case 1: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: symbols = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: type = (io.cwl.avro.EnumSchemaPackage.type.Enum_symbol)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'symbols' field.
   * @return Defines the set of valid symbols.
   */
  public java.util.List<java.lang.CharSequence> getSymbols() {
    return symbols;
  }


  /**
   * Sets the value of the 'symbols' field.
   * Defines the set of valid symbols.
   * @param value the value to set.
   */
  public void setSymbols(java.util.List<java.lang.CharSequence> value) {
    this.symbols = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Must be `enum`
   */
  public io.cwl.avro.EnumSchemaPackage.type.Enum_symbol getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Must be `enum`
   * @param value the value to set.
   */
  public void setType(io.cwl.avro.EnumSchemaPackage.type.Enum_symbol value) {
    this.type = value;
  }

  /**
   * Creates a new EnumSchema RecordBuilder.
   * @return A new EnumSchema RecordBuilder
   */
  public static io.cwl.avro.EnumSchema.Builder newBuilder() {
    return new io.cwl.avro.EnumSchema.Builder();
  }

  /**
   * Creates a new EnumSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnumSchema RecordBuilder
   */
  public static io.cwl.avro.EnumSchema.Builder newBuilder(io.cwl.avro.EnumSchema.Builder other) {
    if (other == null) {
      return new io.cwl.avro.EnumSchema.Builder();
    } else {
      return new io.cwl.avro.EnumSchema.Builder(other);
    }
  }

  /**
   * Creates a new EnumSchema RecordBuilder by copying an existing EnumSchema instance.
   * @param other The existing instance to copy.
   * @return A new EnumSchema RecordBuilder
   */
  public static io.cwl.avro.EnumSchema.Builder newBuilder(io.cwl.avro.EnumSchema other) {
    if (other == null) {
      return new io.cwl.avro.EnumSchema.Builder();
    } else {
      return new io.cwl.avro.EnumSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for EnumSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnumSchema>
    implements org.apache.avro.data.RecordBuilder<EnumSchema> {

    /** Defines the set of valid symbols. */
    private java.util.List<java.lang.CharSequence> symbols;
    /** Must be `enum` */
    private io.cwl.avro.EnumSchemaPackage.type.Enum_symbol type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cwl.avro.EnumSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbols)) {
        this.symbols = data().deepCopy(fields()[0].schema(), other.symbols);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing EnumSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(io.cwl.avro.EnumSchema other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.symbols)) {
        this.symbols = data().deepCopy(fields()[0].schema(), other.symbols);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'symbols' field.
      * Defines the set of valid symbols.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getSymbols() {
      return symbols;
    }


    /**
      * Sets the value of the 'symbols' field.
      * Defines the set of valid symbols.
      * @param value The value of 'symbols'.
      * @return This builder.
      */
    public io.cwl.avro.EnumSchema.Builder setSymbols(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.symbols = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'symbols' field has been set.
      * Defines the set of valid symbols.
      * @return True if the 'symbols' field has been set, false otherwise.
      */
    public boolean hasSymbols() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'symbols' field.
      * Defines the set of valid symbols.
      * @return This builder.
      */
    public io.cwl.avro.EnumSchema.Builder clearSymbols() {
      symbols = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Must be `enum`
      * @return The value.
      */
    public io.cwl.avro.EnumSchemaPackage.type.Enum_symbol getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Must be `enum`
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.cwl.avro.EnumSchema.Builder setType(io.cwl.avro.EnumSchemaPackage.type.Enum_symbol value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Must be `enum`
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * Must be `enum`
      * @return This builder.
      */
    public io.cwl.avro.EnumSchema.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EnumSchema build() {
      try {
        EnumSchema record = new EnumSchema();
        record.symbols = fieldSetFlags()[0] ? this.symbols : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (io.cwl.avro.EnumSchemaPackage.type.Enum_symbol) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EnumSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<EnumSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EnumSchema>
    READER$ = (org.apache.avro.io.DatumReader<EnumSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.symbols.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.symbols) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeEnum(this.type.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.symbols;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("symbols").schema());
        this.symbols = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      this.type = io.cwl.avro.EnumSchemaPackage.type.Enum_symbol.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.symbols;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("symbols").schema());
            this.symbols = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 1:
          this.type = io.cwl.avro.EnumSchemaPackage.type.Enum_symbol.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










