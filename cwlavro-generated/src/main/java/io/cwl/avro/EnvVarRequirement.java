/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cwl.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Define a list of environment variables which will be set in the
execution environment of the tool.  See `EnvironmentDef` for details.
 */
@org.apache.avro.specific.AvroGenerated
public class EnvVarRequirement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8153361029538812353L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnvVarRequirement\",\"namespace\":\"io.cwl.avro\",\"doc\":\"Define a list of environment variables which will be set in the\\nexecution environment of the tool.  See `EnvironmentDef` for details.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'EnvVarRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"envDef\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EnvironmentDef\",\"doc\":\"Define an environment variable that will be set in the runtime environment\\nby the workflow platform when executing the command line tool.  May be the\\nresult of executing an expression, such as getting a parameter from input.\\n\",\"fields\":[{\"name\":\"envName\",\"type\":\"string\",\"doc\":\"The environment variable name\"},{\"name\":\"envValue\",\"type\":[\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"'Expression' is not a real type.  It indicates that a field must allow\\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\\nis declared and supported by the platform, the field must also allow\\nJavascript expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"]}],\"doc\":\"The environment variable value\"}]}},\"doc\":\"The list of environment variables.\",\"jsonldPredicate\":{\"mapSubject\":\"envName\",\"mapPredicate\":\"envValue\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EnvVarRequirement> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EnvVarRequirement> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EnvVarRequirement> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EnvVarRequirement> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EnvVarRequirement> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EnvVarRequirement to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EnvVarRequirement from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EnvVarRequirement instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EnvVarRequirement fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Always 'EnvVarRequirement' */
  public java.lang.CharSequence class$;
  /** The list of environment variables. */
  public java.util.List<io.cwl.avro.EnvironmentDef> envDef;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnvVarRequirement() {}

  /**
   * All-args constructor.
   * @param class$ Always 'EnvVarRequirement'
   * @param envDef The list of environment variables.
   */
  public EnvVarRequirement(java.lang.CharSequence class$, java.util.List<io.cwl.avro.EnvironmentDef> envDef) {
    this.class$ = class$;
    this.envDef = envDef;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return class$;
    case 1: return envDef;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: class$ = (java.lang.CharSequence)value$; break;
    case 1: envDef = (java.util.List<io.cwl.avro.EnvironmentDef>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'class$' field.
   * @return Always 'EnvVarRequirement'
   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }


  /**
   * Sets the value of the 'class$' field.
   * Always 'EnvVarRequirement'
   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'envDef' field.
   * @return The list of environment variables.
   */
  public java.util.List<io.cwl.avro.EnvironmentDef> getEnvDef() {
    return envDef;
  }


  /**
   * Sets the value of the 'envDef' field.
   * The list of environment variables.
   * @param value the value to set.
   */
  public void setEnvDef(java.util.List<io.cwl.avro.EnvironmentDef> value) {
    this.envDef = value;
  }

  /**
   * Creates a new EnvVarRequirement RecordBuilder.
   * @return A new EnvVarRequirement RecordBuilder
   */
  public static io.cwl.avro.EnvVarRequirement.Builder newBuilder() {
    return new io.cwl.avro.EnvVarRequirement.Builder();
  }

  /**
   * Creates a new EnvVarRequirement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnvVarRequirement RecordBuilder
   */
  public static io.cwl.avro.EnvVarRequirement.Builder newBuilder(io.cwl.avro.EnvVarRequirement.Builder other) {
    if (other == null) {
      return new io.cwl.avro.EnvVarRequirement.Builder();
    } else {
      return new io.cwl.avro.EnvVarRequirement.Builder(other);
    }
  }

  /**
   * Creates a new EnvVarRequirement RecordBuilder by copying an existing EnvVarRequirement instance.
   * @param other The existing instance to copy.
   * @return A new EnvVarRequirement RecordBuilder
   */
  public static io.cwl.avro.EnvVarRequirement.Builder newBuilder(io.cwl.avro.EnvVarRequirement other) {
    if (other == null) {
      return new io.cwl.avro.EnvVarRequirement.Builder();
    } else {
      return new io.cwl.avro.EnvVarRequirement.Builder(other);
    }
  }

  /**
   * RecordBuilder for EnvVarRequirement instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnvVarRequirement>
    implements org.apache.avro.data.RecordBuilder<EnvVarRequirement> {

    /** Always 'EnvVarRequirement' */
    private java.lang.CharSequence class$;
    /** The list of environment variables. */
    private java.util.List<io.cwl.avro.EnvironmentDef> envDef;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cwl.avro.EnvVarRequirement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.envDef)) {
        this.envDef = data().deepCopy(fields()[1].schema(), other.envDef);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing EnvVarRequirement instance
     * @param other The existing instance to copy.
     */
    private Builder(io.cwl.avro.EnvVarRequirement other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.envDef)) {
        this.envDef = data().deepCopy(fields()[1].schema(), other.envDef);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'class$' field.
      * Always 'EnvVarRequirement'
      * @return The value.
      */
    public java.lang.CharSequence getClass$() {
      return class$;
    }


    /**
      * Sets the value of the 'class$' field.
      * Always 'EnvVarRequirement'
      * @param value The value of 'class$'.
      * @return This builder.
      */
    public io.cwl.avro.EnvVarRequirement.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.class$ = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'class$' field has been set.
      * Always 'EnvVarRequirement'
      * @return True if the 'class$' field has been set, false otherwise.
      */
    public boolean hasClass$() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'class$' field.
      * Always 'EnvVarRequirement'
      * @return This builder.
      */
    public io.cwl.avro.EnvVarRequirement.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'envDef' field.
      * The list of environment variables.
      * @return The value.
      */
    public java.util.List<io.cwl.avro.EnvironmentDef> getEnvDef() {
      return envDef;
    }


    /**
      * Sets the value of the 'envDef' field.
      * The list of environment variables.
      * @param value The value of 'envDef'.
      * @return This builder.
      */
    public io.cwl.avro.EnvVarRequirement.Builder setEnvDef(java.util.List<io.cwl.avro.EnvironmentDef> value) {
      validate(fields()[1], value);
      this.envDef = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'envDef' field has been set.
      * The list of environment variables.
      * @return True if the 'envDef' field has been set, false otherwise.
      */
    public boolean hasEnvDef() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'envDef' field.
      * The list of environment variables.
      * @return This builder.
      */
    public io.cwl.avro.EnvVarRequirement.Builder clearEnvDef() {
      envDef = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EnvVarRequirement build() {
      try {
        EnvVarRequirement record = new EnvVarRequirement();
        record.class$ = fieldSetFlags()[0] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.envDef = fieldSetFlags()[1] ? this.envDef : (java.util.List<io.cwl.avro.EnvironmentDef>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EnvVarRequirement>
    WRITER$ = (org.apache.avro.io.DatumWriter<EnvVarRequirement>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EnvVarRequirement>
    READER$ = (org.apache.avro.io.DatumReader<EnvVarRequirement>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










