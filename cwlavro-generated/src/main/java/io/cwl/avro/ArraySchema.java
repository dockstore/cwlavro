/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cwl.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ArraySchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2516726164933016015L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ArraySchema\",\"namespace\":\"io.cwl.avro\",\"fields\":[{\"name\":\"items\",\"type\":[{\"type\":\"enum\",\"name\":\"PrimitiveType\",\"symbols\":[\"null\",\"boolean\",\"int\",\"long\",\"float\",\"double\",\"string\"]},{\"type\":\"record\",\"name\":\"RecordSchema\",\"fields\":[{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordField\",\"doc\":\"A field of a record.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"rdfs:comment\"},{\"name\":\"type\",\"type\":[\"PrimitiveType\",\"RecordSchema\",{\"type\":\"record\",\"name\":\"EnumSchema\",\"doc\":\"Define an enumerated type.\\n\",\"fields\":[{\"name\":\"symbols\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Enum_symbol\",\"namespace\":\"io.cwl.avro.EnumSchemaPackage.type\",\"symbols\":[\"enum\"]},\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"}]},\"ArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"RecordSchema\",\"EnumSchema\",\"ArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2}}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#fields\",\"mapSubject\":\"name\",\"mapPredicate\":\"type\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Record_symbol\",\"namespace\":\"io.cwl.avro.RecordSchemaPackage.type\",\"symbols\":[\"record\"]},\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2}}]},\"EnumSchema\",\"ArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"RecordSchema\",\"EnumSchema\",\"ArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#items\",\"_type\":\"@vocab\",\"refScope\":2}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Array_symbol\",\"namespace\":\"io.cwl.avro.ArraySchemaPackage.type\",\"symbols\":[\"array\"]},\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ArraySchema> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ArraySchema> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ArraySchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ArraySchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ArraySchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ArraySchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ArraySchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ArraySchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ArraySchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Defines the type of the array elements. */
  public java.lang.Object items;
  /** Must be `array` */
  public io.cwl.avro.ArraySchemaPackage.type.Array_symbol type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ArraySchema() {}

  /**
   * All-args constructor.
   * @param items Defines the type of the array elements.
   * @param type Must be `array`
   */
  public ArraySchema(java.lang.Object items, io.cwl.avro.ArraySchemaPackage.type.Array_symbol type) {
    this.items = items;
    this.type = type;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return items;
    case 1: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: items = value$; break;
    case 1: type = (io.cwl.avro.ArraySchemaPackage.type.Array_symbol)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'items' field.
   * @return Defines the type of the array elements.
   */
  public java.lang.Object getItems() {
    return items;
  }


  /**
   * Sets the value of the 'items' field.
   * Defines the type of the array elements.
   * @param value the value to set.
   */
  public void setItems(java.lang.Object value) {
    this.items = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Must be `array`
   */
  public io.cwl.avro.ArraySchemaPackage.type.Array_symbol getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Must be `array`
   * @param value the value to set.
   */
  public void setType(io.cwl.avro.ArraySchemaPackage.type.Array_symbol value) {
    this.type = value;
  }

  /**
   * Creates a new ArraySchema RecordBuilder.
   * @return A new ArraySchema RecordBuilder
   */
  public static io.cwl.avro.ArraySchema.Builder newBuilder() {
    return new io.cwl.avro.ArraySchema.Builder();
  }

  /**
   * Creates a new ArraySchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ArraySchema RecordBuilder
   */
  public static io.cwl.avro.ArraySchema.Builder newBuilder(io.cwl.avro.ArraySchema.Builder other) {
    if (other == null) {
      return new io.cwl.avro.ArraySchema.Builder();
    } else {
      return new io.cwl.avro.ArraySchema.Builder(other);
    }
  }

  /**
   * Creates a new ArraySchema RecordBuilder by copying an existing ArraySchema instance.
   * @param other The existing instance to copy.
   * @return A new ArraySchema RecordBuilder
   */
  public static io.cwl.avro.ArraySchema.Builder newBuilder(io.cwl.avro.ArraySchema other) {
    if (other == null) {
      return new io.cwl.avro.ArraySchema.Builder();
    } else {
      return new io.cwl.avro.ArraySchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for ArraySchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ArraySchema>
    implements org.apache.avro.data.RecordBuilder<ArraySchema> {

    /** Defines the type of the array elements. */
    private java.lang.Object items;
    /** Must be `array` */
    private io.cwl.avro.ArraySchemaPackage.type.Array_symbol type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cwl.avro.ArraySchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.items)) {
        this.items = data().deepCopy(fields()[0].schema(), other.items);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing ArraySchema instance
     * @param other The existing instance to copy.
     */
    private Builder(io.cwl.avro.ArraySchema other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.items)) {
        this.items = data().deepCopy(fields()[0].schema(), other.items);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'items' field.
      * Defines the type of the array elements.
      * @return The value.
      */
    public java.lang.Object getItems() {
      return items;
    }


    /**
      * Sets the value of the 'items' field.
      * Defines the type of the array elements.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public io.cwl.avro.ArraySchema.Builder setItems(java.lang.Object value) {
      validate(fields()[0], value);
      this.items = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * Defines the type of the array elements.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'items' field.
      * Defines the type of the array elements.
      * @return This builder.
      */
    public io.cwl.avro.ArraySchema.Builder clearItems() {
      items = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Must be `array`
      * @return The value.
      */
    public io.cwl.avro.ArraySchemaPackage.type.Array_symbol getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Must be `array`
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.cwl.avro.ArraySchema.Builder setType(io.cwl.avro.ArraySchemaPackage.type.Array_symbol value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Must be `array`
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * Must be `array`
      * @return This builder.
      */
    public io.cwl.avro.ArraySchema.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ArraySchema build() {
      try {
        ArraySchema record = new ArraySchema();
        record.items = fieldSetFlags()[0] ? this.items :  defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (io.cwl.avro.ArraySchemaPackage.type.Array_symbol) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ArraySchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<ArraySchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ArraySchema>
    READER$ = (org.apache.avro.io.DatumReader<ArraySchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










