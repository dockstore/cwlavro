/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cwl.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** A list of software packages that should be configured in the environment of
the defined process.
 */
@org.apache.avro.specific.AvroGenerated
public class SoftwareRequirement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8398450624765514796L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SoftwareRequirement\",\"namespace\":\"io.cwl.avro\",\"doc\":\"A list of software packages that should be configured in the environment of\\nthe defined process.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'SoftwareRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"packages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SoftwarePackage\",\"fields\":[{\"name\":\"package\",\"type\":\"string\",\"doc\":\"The name of the software to be made available. If the name is\\ncommon, inconsistent, or otherwise ambiguous it should be combined with\\none or more identifiers in the `specs` field.\\n\"},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"The (optional) versions of the software that are known to be\\ncompatible.\\n\"},{\"name\":\"specs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"One or more [IRI](https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier)s\\nidentifying resources for installing or enabling the software named in\\nthe `package` field. Implementations may provide resolvers which map\\nthese software identifer IRIs to some configuration action; or they can\\nuse only the name from the `package` field on a best effort basis.\\n\\nFor example, the IRI https://packages.debian.org/bowtie could\\nbe resolved with `apt-get install bowtie`. The IRI\\nhttps://anaconda.org/bioconda/bowtie could be resolved with `conda\\ninstall -c bioconda bowtie`.\\n\\nIRIs can also be system independent and used to map to a specific\\nsoftware installation or selection mechanism.\\nUsing [RRID](https://www.identifiers.org/rrid/) as an example:\\nhttps://identifiers.org/rrid/RRID:SCR_005476\\ncould be fulfilled using the above mentioned Debian or bioconda\\npackage, a local installation managed by [Environement Modules](http://modules.sourceforge.net/),\\nor any other mechanism the platform chooses. IRIs can also be from\\nidentifer sources that are discipline specific yet still system\\nindependent. As an example, the equivalent [ELIXIR Tools and Data\\nService Registry](https://bio.tools) IRI to the previous RRID example is\\nhttps://bio.tools/tool/bowtie2/version/2.2.8.\\nIf supported by a given registry, implementations are encouraged to\\nquery these system independent sofware identifier IRIs directly for\\nlinks to packaging systems.\\n\\nA site specific IRI can be listed as well. For example, an academic\\ncomputing cluster using Environement Modules could list the IRI\\n`https://hpc.example.edu/modules/bowtie-tbb/1.22` to indicate that\\n`module load bowtie-tbb/1.1.2` should be executed to make available\\n`bowtie` version 1.1.2 compiled with the TBB library prior to running\\nthe accompanying Workflow or CommandLineTool. Note that the example IRI\\nis specific to a particular institution and computing environment as\\nthe Environment Modules system does not have a common namespace or\\nstandardized naming convention.\\n\\nThis last example is the least portable and should only be used if\\nmechanisms based off of the `package` field or more generic IRIs are\\nunavailable or unsuitable. While harmless to other sites, site specific\\nsoftware IRIs should be left out of shared CWL descriptions to avoid\\nclutter.\\n\"}]}},\"doc\":\"The list of software to be configured.\",\"jsonldPredicate\":{\"mapSubject\":\"package\",\"mapPredicate\":\"specs\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SoftwareRequirement> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SoftwareRequirement> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SoftwareRequirement> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SoftwareRequirement> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SoftwareRequirement> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SoftwareRequirement to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SoftwareRequirement from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SoftwareRequirement instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SoftwareRequirement fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Always 'SoftwareRequirement' */
  private java.lang.CharSequence class$;
  /** The list of software to be configured. */
  private java.util.List<io.cwl.avro.SoftwarePackage> packages;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SoftwareRequirement() {}

  /**
   * All-args constructor.
   * @param class$ Always 'SoftwareRequirement'
   * @param packages The list of software to be configured.
   */
  public SoftwareRequirement(java.lang.CharSequence class$, java.util.List<io.cwl.avro.SoftwarePackage> packages) {
    this.class$ = class$;
    this.packages = packages;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return class$;
    case 1: return packages;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: class$ = (java.lang.CharSequence)value$; break;
    case 1: packages = (java.util.List<io.cwl.avro.SoftwarePackage>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'class$' field.
   * @return Always 'SoftwareRequirement'
   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }


  /**
   * Sets the value of the 'class$' field.
   * Always 'SoftwareRequirement'
   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'packages' field.
   * @return The list of software to be configured.
   */
  public java.util.List<io.cwl.avro.SoftwarePackage> getPackages() {
    return packages;
  }


  /**
   * Sets the value of the 'packages' field.
   * The list of software to be configured.
   * @param value the value to set.
   */
  public void setPackages(java.util.List<io.cwl.avro.SoftwarePackage> value) {
    this.packages = value;
  }

  /**
   * Creates a new SoftwareRequirement RecordBuilder.
   * @return A new SoftwareRequirement RecordBuilder
   */
  public static io.cwl.avro.SoftwareRequirement.Builder newBuilder() {
    return new io.cwl.avro.SoftwareRequirement.Builder();
  }

  /**
   * Creates a new SoftwareRequirement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SoftwareRequirement RecordBuilder
   */
  public static io.cwl.avro.SoftwareRequirement.Builder newBuilder(io.cwl.avro.SoftwareRequirement.Builder other) {
    if (other == null) {
      return new io.cwl.avro.SoftwareRequirement.Builder();
    } else {
      return new io.cwl.avro.SoftwareRequirement.Builder(other);
    }
  }

  /**
   * Creates a new SoftwareRequirement RecordBuilder by copying an existing SoftwareRequirement instance.
   * @param other The existing instance to copy.
   * @return A new SoftwareRequirement RecordBuilder
   */
  public static io.cwl.avro.SoftwareRequirement.Builder newBuilder(io.cwl.avro.SoftwareRequirement other) {
    if (other == null) {
      return new io.cwl.avro.SoftwareRequirement.Builder();
    } else {
      return new io.cwl.avro.SoftwareRequirement.Builder(other);
    }
  }

  /**
   * RecordBuilder for SoftwareRequirement instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SoftwareRequirement>
    implements org.apache.avro.data.RecordBuilder<SoftwareRequirement> {

    /** Always 'SoftwareRequirement' */
    private java.lang.CharSequence class$;
    /** The list of software to be configured. */
    private java.util.List<io.cwl.avro.SoftwarePackage> packages;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cwl.avro.SoftwareRequirement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.packages)) {
        this.packages = data().deepCopy(fields()[1].schema(), other.packages);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing SoftwareRequirement instance
     * @param other The existing instance to copy.
     */
    private Builder(io.cwl.avro.SoftwareRequirement other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.packages)) {
        this.packages = data().deepCopy(fields()[1].schema(), other.packages);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'class$' field.
      * Always 'SoftwareRequirement'
      * @return The value.
      */
    public java.lang.CharSequence getClass$() {
      return class$;
    }


    /**
      * Sets the value of the 'class$' field.
      * Always 'SoftwareRequirement'
      * @param value The value of 'class$'.
      * @return This builder.
      */
    public io.cwl.avro.SoftwareRequirement.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.class$ = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'class$' field has been set.
      * Always 'SoftwareRequirement'
      * @return True if the 'class$' field has been set, false otherwise.
      */
    public boolean hasClass$() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'class$' field.
      * Always 'SoftwareRequirement'
      * @return This builder.
      */
    public io.cwl.avro.SoftwareRequirement.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'packages' field.
      * The list of software to be configured.
      * @return The value.
      */
    public java.util.List<io.cwl.avro.SoftwarePackage> getPackages() {
      return packages;
    }


    /**
      * Sets the value of the 'packages' field.
      * The list of software to be configured.
      * @param value The value of 'packages'.
      * @return This builder.
      */
    public io.cwl.avro.SoftwareRequirement.Builder setPackages(java.util.List<io.cwl.avro.SoftwarePackage> value) {
      validate(fields()[1], value);
      this.packages = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'packages' field has been set.
      * The list of software to be configured.
      * @return True if the 'packages' field has been set, false otherwise.
      */
    public boolean hasPackages() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'packages' field.
      * The list of software to be configured.
      * @return This builder.
      */
    public io.cwl.avro.SoftwareRequirement.Builder clearPackages() {
      packages = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SoftwareRequirement build() {
      try {
        SoftwareRequirement record = new SoftwareRequirement();
        record.class$ = fieldSetFlags()[0] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.packages = fieldSetFlags()[1] ? this.packages : (java.util.List<io.cwl.avro.SoftwarePackage>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SoftwareRequirement>
    WRITER$ = (org.apache.avro.io.DatumWriter<SoftwareRequirement>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SoftwareRequirement>
    READER$ = (org.apache.avro.io.DatumReader<SoftwareRequirement>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.class$);

    long size0 = this.packages.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (io.cwl.avro.SoftwarePackage e0: this.packages) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.class$ = in.readString(this.class$ instanceof Utf8 ? (Utf8)this.class$ : null);

      long size0 = in.readArrayStart();
      java.util.List<io.cwl.avro.SoftwarePackage> a0 = this.packages;
      if (a0 == null) {
        a0 = new SpecificData.Array<io.cwl.avro.SoftwarePackage>((int)size0, SCHEMA$.getField("packages").schema());
        this.packages = a0;
      } else a0.clear();
      SpecificData.Array<io.cwl.avro.SoftwarePackage> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<io.cwl.avro.SoftwarePackage>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          io.cwl.avro.SoftwarePackage e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new io.cwl.avro.SoftwarePackage();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.class$ = in.readString(this.class$ instanceof Utf8 ? (Utf8)this.class$ : null);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<io.cwl.avro.SoftwarePackage> a0 = this.packages;
          if (a0 == null) {
            a0 = new SpecificData.Array<io.cwl.avro.SoftwarePackage>((int)size0, SCHEMA$.getField("packages").schema());
            this.packages = a0;
          } else a0.clear();
          SpecificData.Array<io.cwl.avro.SoftwarePackage> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<io.cwl.avro.SoftwarePackage>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              io.cwl.avro.SoftwarePackage e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new io.cwl.avro.SoftwarePackage();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










