/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cwl.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Define an environment variable that will be set in the runtime environment
by the workflow platform when executing the command line tool.  May be the
result of executing an expression, such as getting a parameter from input.
 */
@org.apache.avro.specific.AvroGenerated
public class EnvironmentDef extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5705672796807569383L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnvironmentDef\",\"namespace\":\"io.cwl.avro\",\"doc\":\"Define an environment variable that will be set in the runtime environment\\nby the workflow platform when executing the command line tool.  May be the\\nresult of executing an expression, such as getting a parameter from input.\\n\",\"fields\":[{\"name\":\"envName\",\"type\":\"string\",\"doc\":\"The environment variable name\"},{\"name\":\"envValue\",\"type\":[\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"'Expression' is not a real type.  It indicates that a field must allow\\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\\nis declared and supported by the platform, the field must also allow\\nJavascript expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"]}],\"doc\":\"The environment variable value\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EnvironmentDef> ENCODER =
      new BinaryMessageEncoder<EnvironmentDef>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EnvironmentDef> DECODER =
      new BinaryMessageDecoder<EnvironmentDef>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EnvironmentDef> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EnvironmentDef> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EnvironmentDef> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EnvironmentDef>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EnvironmentDef to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EnvironmentDef from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EnvironmentDef instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EnvironmentDef fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The environment variable name */
   private java.lang.CharSequence envName;
  /** The environment variable value */
   private java.lang.Object envValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnvironmentDef() {}

  /**
   * All-args constructor.
   * @param envName The environment variable name
   * @param envValue The environment variable value
   */
  public EnvironmentDef(java.lang.CharSequence envName, java.lang.Object envValue) {
    this.envName = envName;
    this.envValue = envValue;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return envName;
    case 1: return envValue;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: envName = (java.lang.CharSequence)value$; break;
    case 1: envValue = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'envName' field.
   * @return The environment variable name
   */
  public java.lang.CharSequence getEnvName() {
    return envName;
  }


  /**
   * Sets the value of the 'envName' field.
   * The environment variable name
   * @param value the value to set.
   */
  public void setEnvName(java.lang.CharSequence value) {
    this.envName = value;
  }

  /**
   * Gets the value of the 'envValue' field.
   * @return The environment variable value
   */
  public java.lang.Object getEnvValue() {
    return envValue;
  }


  /**
   * Sets the value of the 'envValue' field.
   * The environment variable value
   * @param value the value to set.
   */
  public void setEnvValue(java.lang.Object value) {
    this.envValue = value;
  }

  /**
   * Creates a new EnvironmentDef RecordBuilder.
   * @return A new EnvironmentDef RecordBuilder
   */
  public static io.cwl.avro.EnvironmentDef.Builder newBuilder() {
    return new io.cwl.avro.EnvironmentDef.Builder();
  }

  /**
   * Creates a new EnvironmentDef RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnvironmentDef RecordBuilder
   */
  public static io.cwl.avro.EnvironmentDef.Builder newBuilder(io.cwl.avro.EnvironmentDef.Builder other) {
    if (other == null) {
      return new io.cwl.avro.EnvironmentDef.Builder();
    } else {
      return new io.cwl.avro.EnvironmentDef.Builder(other);
    }
  }

  /**
   * Creates a new EnvironmentDef RecordBuilder by copying an existing EnvironmentDef instance.
   * @param other The existing instance to copy.
   * @return A new EnvironmentDef RecordBuilder
   */
  public static io.cwl.avro.EnvironmentDef.Builder newBuilder(io.cwl.avro.EnvironmentDef other) {
    if (other == null) {
      return new io.cwl.avro.EnvironmentDef.Builder();
    } else {
      return new io.cwl.avro.EnvironmentDef.Builder(other);
    }
  }

  /**
   * RecordBuilder for EnvironmentDef instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnvironmentDef>
    implements org.apache.avro.data.RecordBuilder<EnvironmentDef> {

    /** The environment variable name */
    private java.lang.CharSequence envName;
    /** The environment variable value */
    private java.lang.Object envValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cwl.avro.EnvironmentDef.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.envName)) {
        this.envName = data().deepCopy(fields()[0].schema(), other.envName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.envValue)) {
        this.envValue = data().deepCopy(fields()[1].schema(), other.envValue);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing EnvironmentDef instance
     * @param other The existing instance to copy.
     */
    private Builder(io.cwl.avro.EnvironmentDef other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.envName)) {
        this.envName = data().deepCopy(fields()[0].schema(), other.envName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.envValue)) {
        this.envValue = data().deepCopy(fields()[1].schema(), other.envValue);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'envName' field.
      * The environment variable name
      * @return The value.
      */
    public java.lang.CharSequence getEnvName() {
      return envName;
    }


    /**
      * Sets the value of the 'envName' field.
      * The environment variable name
      * @param value The value of 'envName'.
      * @return This builder.
      */
    public io.cwl.avro.EnvironmentDef.Builder setEnvName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.envName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'envName' field has been set.
      * The environment variable name
      * @return True if the 'envName' field has been set, false otherwise.
      */
    public boolean hasEnvName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'envName' field.
      * The environment variable name
      * @return This builder.
      */
    public io.cwl.avro.EnvironmentDef.Builder clearEnvName() {
      envName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'envValue' field.
      * The environment variable value
      * @return The value.
      */
    public java.lang.Object getEnvValue() {
      return envValue;
    }


    /**
      * Sets the value of the 'envValue' field.
      * The environment variable value
      * @param value The value of 'envValue'.
      * @return This builder.
      */
    public io.cwl.avro.EnvironmentDef.Builder setEnvValue(java.lang.Object value) {
      validate(fields()[1], value);
      this.envValue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'envValue' field has been set.
      * The environment variable value
      * @return True if the 'envValue' field has been set, false otherwise.
      */
    public boolean hasEnvValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'envValue' field.
      * The environment variable value
      * @return This builder.
      */
    public io.cwl.avro.EnvironmentDef.Builder clearEnvValue() {
      envValue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EnvironmentDef build() {
      try {
        EnvironmentDef record = new EnvironmentDef();
        record.envName = fieldSetFlags()[0] ? this.envName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.envValue = fieldSetFlags()[1] ? this.envValue :  defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EnvironmentDef>
    WRITER$ = (org.apache.avro.io.DatumWriter<EnvironmentDef>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EnvironmentDef>
    READER$ = (org.apache.avro.io.DatumReader<EnvironmentDef>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










