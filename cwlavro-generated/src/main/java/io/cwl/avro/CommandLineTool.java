/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cwl.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This defines the schema of the CWL Command Line Tool Description document.
 */
@org.apache.avro.specific.AvroGenerated
public class CommandLineTool extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -47951398300176519L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommandLineTool\",\"namespace\":\"io.cwl.avro\",\"doc\":\"This defines the schema of the CWL Command Line Tool Description document.\\n\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"The unique identifier for this process object.\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"inputs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommandInputParameter\",\"doc\":\"An input parameter for a CommandLineTool.\",\"fields\":[{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"'Expression' is not a real type.  It indicates that a field must allow\\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\\nis declared and supported by the platform, the field must also allow\\nJavascript expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"]},{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nProvides a pattern or expression specifying files or directories that\\nmust be included alongside the primary file.  All listed secondary\\nfiles must be present.  An implementation may fail workflow execution\\nif an expected secondary file does not exist.\\n\\nIf the value is an expression, the value of `self` in the expression\\nmust be the primary input or output File object to which this binding\\napplies.  The `basename`, `nameroot` and `nameext` fields must be\\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\\nalso be present.  The expression must return a filename string relative\\nto the path to the primary File, a File or Directory object with either\\n`path` or `location` and `basename` fields set, or an array consisting\\nof strings or File or Directory objects.  It is legal to reference an\\nunchanged File or Directory object taken from input as a secondaryFile.\\n\\nTo work on non-filename-preserving storage systems, portable tool\\ndescriptions should avoid constructing new values from `location`, but\\nshould construct relative references using `basename` or `nameroot`\\ninstead.\\n\\nIf a value in `secondaryFiles` is a string that is not an expression,\\nit specifies that the following pattern should be applied to the path\\nof the primary file to yield a filename relative to the primary File:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"streamable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nA value of `true` indicates that the file is read or written\\nsequentially without seeking.  An implementation may use this flag to\\nindicate whether it is valid to stream file contents using a named\\npipe.  Default: `false`.\\n\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A documentation string for this type, or an array of strings which should be concatenated.\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The unique identifier for this parameter object.\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"},{\"name\":\"format\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"},\"Expression\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nThis must be one or more IRIs of concept nodes\\nthat represents file formats which are allowed as input to this\\nparameter, preferrably defined within an ontology.  If no ontology is\\navailable, file formats may be tested by exact match.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#format\",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"},{\"name\":\"inputBinding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CommandLineBinding\",\"doc\":\"\\nWhen listed under `inputBinding` in the input schema, the term\\n\\\"value\\\" refers to the the corresponding value in the input object.  For\\nbinding objects listed in `CommandLineTool.arguments`, the term \\\"value\\\"\\nrefers to the effective value after evaluating `valueFrom`.\\n\\nThe binding behavior when building the command line depends on the data\\ntype of the value.  If there is a mismatch between the type described by\\nthe input schema and the effective value, such as resulting from an\\nexpression evaluation, an implementation must use the data type of the\\neffective value.\\n\\n  - **string**: Add `prefix` and the string to the command line.\\n\\n  - **number**: Add `prefix` and decimal representation to command line.\\n\\n  - **boolean**: If true, add `prefix` to the command line.  If false, add\\n      nothing.\\n\\n  - **File**: Add `prefix` and the value of\\n    [`File.path`](#File) to the command line.\\n\\n  - **Directory**: Add `prefix` and the value of\\n    [`Directory.path`](#Directory) to the command line.\\n\\n  - **array**: If `itemSeparator` is specified, add `prefix` and the join\\n      the array into a single string with `itemSeparator` separating the\\n      items.  Otherwise first add `prefix`, then recursively process\\n      individual elements.\\n      If the array is empty, it does not add anything to command line.\\n\\n  - **object**: Add `prefix` only, and recursively add object fields for\\n      which `inputBinding` is specified.\\n\\n  - **null**: Add nothing.\\n\",\"fields\":[{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nRead up to the first 64 KiB of text from the file and place it in the\\n\\\"contents\\\" field of the file object for use by expressions.\\n\",\"jsonldPredicate\":\"cwl:loadContents\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputBinding\"},{\"name\":\"position\",\"type\":[\"null\",\"int\"],\"doc\":\"The sorting key.  Default position is 0.\"},{\"name\":\"prefix\",\"type\":[\"null\",\"string\"],\"doc\":\"Command line prefix to add before the value.\"},{\"name\":\"separate\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true (default), then the prefix and value must be added as separate\\ncommand line arguments; if false, prefix and value must be concatenated\\ninto a single command line argument.\\n\"},{\"name\":\"itemSeparator\",\"type\":[\"null\",\"string\"],\"doc\":\"Join the array elements into a single string with the elements\\nseparated by by `itemSeparator`.\\n\"},{\"name\":\"valueFrom\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"If `valueFrom` is a constant string value, use this as the value and\\napply the binding rules above.\\n\\nIf `valueFrom` is an expression, evaluate the expression to yield the\\nactual value to use to build the command line and apply the binding\\nrules above.  If the inputBinding is associated with an input\\nparameter, the value of `self` in the expression will be the value of\\nthe input parameter.  Input parameter defaults (as specified by the\\n`InputParameter.default` field) must be applied before evaluating the\\nexpression.\\n\\nWhen a binding is part of the `CommandLineTool.arguments` field,\\nthe `valueFrom` field is required.\\n\",\"jsonldPredicate\":\"cwl:valueFrom\"},{\"name\":\"shellQuote\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If `ShellCommandRequirement` is in the requirements for the current command,\\nthis controls whether the value is quoted on the command line (default is true).\\nUse `shellQuote: false` to inject metacharacters for operations such as pipes.\\n\\nIf `shellQuote` is true or not provided, the implementation must not\\npermit interpretation of any shell metacharacters or directives.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputBinding\"}],\"doc\":\"Describes how to handle the inputs of a process and convert them\\ninto a concrete form for execution, such ","as command line parameters.\\n\",\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"},{\"name\":\"default\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"Any\",\"doc\":\"The **Any** type validates for any non-null value.\\n\",\"symbols\":[\"Any\"],\"docAfter\":\"https://w3id.org/cwl/salad#PrimitiveType\"}],\"doc\":\"The default value to use for this parameter if the parameter is missing\\nfrom the input object, or if the value of the parameter in the input\\nobject is `null`.  Default values are applied before evaluating expressions\\n(e.g. dependent `valueFrom` fields).\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#default\",\"noLinkCheck\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"CWLType\",\"symbols\":[\"null\",\"boolean\",\"int\",\"long\",\"float\",\"double\",\"string\",\"File\",\"Directory\"],\"extends\":\"https://w3id.org/cwl/salad#PrimitiveType\"},{\"type\":\"record\",\"name\":\"CommandInputRecordSchema\",\"fields\":[{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommandInputRecordField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"type\",\"type\":[\"CWLType\",\"CommandInputRecordSchema\",{\"type\":\"record\",\"name\":\"CommandInputEnumSchema\",\"fields\":[{\"name\":\"symbols\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Enum_symbol\",\"namespace\":\"io.cwl.avro.EnumSchemaPackage.type\",\"symbols\":[\"enum\"]},\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputEnumSchema\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputEnumSchema\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]},{\"type\":\"record\",\"name\":\"CommandInputArraySchema\",\"fields\":[{\"name\":\"items\",\"type\":[\"CWLType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#items\",\"_type\":\"@vocab\",\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Array_symbol\",\"namespace\":\"io.cwl.avro.ArraySchemaPackage.type\",\"symbols\":[\"array\"]},\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputArraySchema\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]},\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputRecordField\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this process object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputRecordField\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputRecordField\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#fields\",\"mapSubject\":\"name\",\"mapPredicate\":\"type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Record_symbol\",\"namespace\":\"io.cwl.avro.RecordSchemaPackage.type\",\"symbols\":[\"record\"]},\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputRecordSchema\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordField\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordField\"}]},\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\"]}],\"doc\":\"Specify valid types of data that may be assigned to this parameter.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"refScope\":2,\"typeDSL\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputParameter\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]}},\"doc\":\"Defines the input parameters of the process.  The process is ready to\\nrun when all required input parameters are associated with concrete\\nvalues.  Input parameters include a schema for each parameter which is\\nused to validate the input object.  It may also be used to build a user\\ninterface for constructing the input object.\\n\\nWhen accepting an input object, all input parameters mu","st have a value.\\nIf an input parameter is missing from the input object, it must be\\nassigned a value of `null` (or the value of `default` for that\\nparameter, if provided) for the purposes of validation and evaluation\\nof expressions.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#inputs\",\"mapSubject\":\"id\",\"mapPredicate\":\"type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"outputs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommandOutputParameter\",\"doc\":\"An output parameter for a CommandLineTool.\",\"fields\":[{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",\"Expression\",{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nProvides a pattern or expression specifying files or directories that\\nmust be included alongside the primary file.  All listed secondary\\nfiles must be present.  An implementation may fail workflow execution\\nif an expected secondary file does not exist.\\n\\nIf the value is an expression, the value of `self` in the expression\\nmust be the primary input or output File object to which this binding\\napplies.  The `basename`, `nameroot` and `nameext` fields must be\\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\\nalso be present.  The expression must return a filename string relative\\nto the path to the primary File, a File or Directory object with either\\n`path` or `location` and `basename` fields set, or an array consisting\\nof strings or File or Directory objects.  It is legal to reference an\\nunchanged File or Directory object taken from input as a secondaryFile.\\n\\nTo work on non-filename-preserving storage systems, portable tool\\ndescriptions should avoid constructing new values from `location`, but\\nshould construct relative references using `basename` or `nameroot`\\ninstead.\\n\\nIf a value in `secondaryFiles` is a string that is not an expression,\\nit specifies that the following pattern should be applied to the path\\nof the primary file to yield a filename relative to the primary File:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"streamable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nA value of `true` indicates that the file is read or written\\nsequentially without seeking.  An implementation may use this flag to\\nindicate whether it is valid to stream file contents using a named\\npipe.  Default: `false`.\\n\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A documentation string for this type, or an array of strings which should be concatenated.\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The unique identifier for this parameter object.\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputParameter\"},{\"name\":\"outputBinding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CommandOutputBinding\",\"doc\":\"Describes how to generate an output parameter based on the files produced\\nby a CommandLineTool.\\n\\nThe output parameter value is generated by applying these operations in the\\nfollowing order:\\n\\n  - glob\\n  - loadContents\\n  - outputEval\\n  - secondaryFiles\\n\",\"fields\":[{\"name\":\"glob\",\"type\":[\"null\",\"string\",\"Expression\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Find files relative to the output directory, using POSIX glob(3)\\npathname matching.  If an array is provided, find files that match any\\npattern in the array.  If an expression is provided, the expression must\\nreturn a string or an array of strings, which will then be evaluated as\\none or more glob patterns.  Must only match and return files which\\nactually exist.\\n\"},{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"For each file matched in `glob`, read up to\\nthe first 64 KiB of text from the file and place it in the `contents`\\nfield of the file object for manipulation by `outputEval`.\\n\",\"jsonldPredicate\":\"cwl:loadContents\"},{\"name\":\"outputEval\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"Evaluate an expression to generate the output value.  If `glob` was\\nspecified, the value of `self` must be an array containing file objects\\nthat were matched.  If no files were matched, `self` must be a zero\\nlength array; if a single file was matched, the value of `self` is an\\narray of a single element.  Additionally, if `loadContents` is `true`,\\nthe File objects must include up to the first 64 KiB of file contents\\nin the `contents` field.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#OutputBinding\"}],\"doc\":\"Describes how to handle the outputs of a process.\\n\",\"jsonldPredicate\":\"cwl:outputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputParameter\"},{\"name\":\"format\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nThis is the file format that will be assigned to\\nthe output parameter.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#format\",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputParameter\"},{\"name\":\"type\",\"type\":[\"null\",\"CWLType\",{\"type\":\"enum\",\"name\":\"stdout\",\"doc\":\"Only valid as a `type` for a `CommandLineTool` output with no\\n`outputBinding` set.\\n\\nThe following\\n```\\noutputs:\\n  an_output_name:\\n    type: stdout\\n\\nstdout: a_stdout_file\\n```\\nis equivalent to\\n```\\noutputs:\\n  an_output_name:\\n    type: File\\n    streamable: true\\n    outputBinding:\\n      glob: a_stdout_file\\n\\nstdout: a_stdout_file\\n```\\n\\nIf there is no `stdout` name provided, a random filename will be created.\\nFor example, the following\\n```\\noutputs:\\n  an_output_name:\\n    type: stdout\\n```\\nis equivalent to\\n```\\noutputs:\\n  an_output_name:\\n    type: File\\n    streamable: true\\n    outputBinding:\\n      glob: random_stdout_filenameABCDEFG\\n\\nstdout: random_stdout_filenameABCDEFG\\n```\\n\",\"symbols\":[\"stdout\"],\"docParent\":\"https://w3id.org/cwl/cwl#CommandOutputParameter\"},{\"type\":\"enum\",\"name\":\"stderr\",\"doc\":\"Only valid as a `type` for a `CommandLineTool` output with no\\n`outputBinding` set.\\n\\nThe following\\n```\\noutputs:\\n  an_output_name:\\n  type: stderr\\n\\nstderr: a_stderr_file\\n```\\nis equivalent to\\n```\\noutputs:\\n  an_output_name:\\n    type: File\\n    streamable: true\\n    outputBinding:\\n      glob: a_stderr_file\\n\\nstderr: a_stderr_file\\n```\\n\\nIf there is no `stderr` name provided, a random filename will be created.\\nFor example, the following\\n```\\noutputs:\\n  an_output_name:\\n    type: stderr\\n```\\nis equivalent to\\n```\\noutputs:\\n  an_output_name:\\n    type: File\\n    streamable: true\\n    outputBinding:\\n      glob: random_stderr_filenameABCDEFG\\n\\nstderr: random_stderr_filenameABCDEFG\\n```\\n\",\"symbols\":[\"stderr\"],\"docParent\":\"https://w3id.org/cwl/cwl#CommandOutputParameter\"},{\"type\":\"record\",\"name\":\"CommandOutputRecordSchema\",\"fields\":[{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommandOutputRecordField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"type\",\"type\":[\"CWLType\",\"CommandOutputRecordSchema\",{\"type\":\"record\",\"name\":\"CommandOutputEnumSchema\",\"fields\":[{\"name\":\"symbols\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#symbols\"",",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"type\",\"type\":\"io.cwl.avro.EnumSchemaPackage.type.Enum_symbol\",\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"outputBinding\",\"type\":[\"null\",\"CommandOutputBinding\"],\"jsonldPredicate\":\"cwl:outputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\"}],\"extends\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputBinding\"}]},{\"type\":\"record\",\"name\":\"CommandOutputArraySchema\",\"fields\":[{\"name\":\"items\",\"type\":[\"CWLType\",\"CommandOutputRecordSchema\",\"CommandOutputEnumSchema\",\"CommandOutputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandOutputRecordSchema\",\"CommandOutputEnumSchema\",\"CommandOutputArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#items\",\"_type\":\"@vocab\",\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"type\",\"type\":\"io.cwl.avro.ArraySchemaPackage.type.Array_symbol\",\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"outputBinding\",\"type\":[\"null\",\"CommandOutputBinding\"],\"jsonldPredicate\":\"cwl:outputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputArraySchema\"}],\"extends\":\"https://w3id.org/cwl/cwl#OutputArraySchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputBinding\"}]},\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandOutputRecordSchema\",\"CommandOutputEnumSchema\",\"CommandOutputArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"outputBinding\",\"type\":[\"null\",\"CommandOutputBinding\"],\"jsonldPredicate\":\"cwl:outputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputRecordField\"}],\"extends\":\"https://w3id.org/cwl/cwl#OutputRecordField\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputBinding\"}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#fields\",\"mapSubject\":\"name\",\"mapPredicate\":\"type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"type\",\"type\":\"io.cwl.avro.RecordSchemaPackage.type.Record_symbol\",\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"jsonldPredicate\":\"@id\"}],\"extends\":\"https://w3id.org/cwl/cwl#OutputRecordSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputRecordField\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputRecordField\"}]},\"CommandOutputEnumSchema\",\"CommandOutputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandOutputRecordSchema\",\"CommandOutputEnumSchema\",\"CommandOutputArraySchema\",\"string\"]}],\"doc\":\"Specify valid types of data that may be assigned to this parameter.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"refScope\":2,\"typeDSL\":true}}],\"extends\":\"https://w3id.org/cwl/cwl#OutputParameter\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputBinding\"}]}},\"doc\":\"Defines the parameters representing the output of the process.  May be\\nused to generate and/or validate the output object.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#outputs\",\"mapSubject\":\"id\",\"mapPredicate\":\"type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"requirements\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"InlineJavascriptRequirement\",\"doc\":\"Indicates that the workflow platform must support inline Javascript expressions.\\nIf this requirement is not present, the workflow platform must not perform expression\\ninterpolatation.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'InlineJavascriptRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"expressionLib\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Additional code fragments that will also be inserted\\nbefore executing the expression code.  Allows for function definitions that may\\nbe called from CWL expressions.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"SchemaDefRequirement\",\"doc\":\"This field consists of an array of type definitions which must be used when\\ninterpreting the `inputs` and `outputs` fields.  When a `type` field\\ncontain a IRI, the implementation must check if the type is defined in\\n`schemaDefs` and use that definition.  If the type is not found in\\n`schemaDefs`, it is an error.  The entries in `schemaDefs` must be\\nprocessed in the order listed such that later schema definitions may refer\\nto earlier schema definitions.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'SchemaDefRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"types\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"InputRecordSchema\",\"fields\":[{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InputRecordField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"type\",\"type\":[\"CWLType\",\"InputRecordSchema\",{\"type\":\"record\",\"name\":\"InputEnumSchema\",\"fields\":[{\"name\":\"symbols\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"type\",\"type\":\"io.cwl.avro.EnumSchemaPackage.type.Enum_symbol\",","\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"jsonldPredicate\":\"@id\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\"}],\"extends\":[\"https://w3id.org/cwl/salad#EnumSchema\",\"https://w3id.org/cwl/cwl#InputSchema\"]},{\"type\":\"record\",\"name\":\"InputArraySchema\",\"fields\":[{\"name\":\"items\",\"type\":[\"CWLType\",\"InputRecordSchema\",\"InputEnumSchema\",\"InputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"InputRecordSchema\",\"InputEnumSchema\",\"InputArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#items\",\"_type\":\"@vocab\",\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"type\",\"type\":\"io.cwl.avro.ArraySchemaPackage.type.Array_symbol\",\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\"}],\"extends\":[\"https://w3id.org/cwl/salad#ArraySchema\",\"https://w3id.org/cwl/cwl#InputSchema\"],\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/salad#RecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#EnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#ArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#PrimitiveType\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CWLType\"}]},\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"InputRecordSchema\",\"InputEnumSchema\",\"InputArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this process object.\",\"jsonldPredicate\":\"rdfs:label\"}],\"extends\":\"https://w3id.org/cwl/salad#RecordField\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/salad#RecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#EnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#ArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#PrimitiveType\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CWLType\"}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#fields\",\"mapSubject\":\"name\",\"mapPredicate\":\"type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"type\",\"type\":\"io.cwl.avro.RecordSchemaPackage.type.Record_symbol\",\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"jsonldPredicate\":\"@id\"}],\"extends\":[\"https://w3id.org/cwl/salad#RecordSchema\",\"https://w3id.org/cwl/cwl#InputSchema\"],\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/salad#RecordField\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputRecordField\"}]},\"InputEnumSchema\",\"InputArraySchema\"]},\"doc\":\"The list of type definitions.\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"DockerRequirement\",\"doc\":\"Indicates that a workflow component should be run in a\\n[Docker](http://docker.com) container, and specifies how to fetch or build\\nthe image.\\n\\nIf a CommandLineTool lists `DockerRequirement` under\\n`hints` (or `requirements`), it may (or must) be run in the specified Docker\\ncontainer.\\n\\nThe platform must first acquire or install the correct Docker image as\\nspecified by `dockerPull`, `dockerImport`, `dockerLoad` or `dockerFile`.\\n\\nThe platform must execute the tool in the container using `docker run` with\\nthe appropriate Docker image and tool command line.\\n\\nThe workflow platform may provide input files and the designated output\\ndirectory through the use of volume bind mounts.  The platform should rewrite\\nfile paths in the input object to correspond to the Docker bind mounted\\nlocations. That is, the platform should rewrite values in the parameter context\\nsuch as `runtime.outdir`, `runtime.tmpdir` and others to be valid paths\\nwithin the container.\\n\\nWhen running a tool contained in Docker, the workflow platform must not\\nassume anything about the contents of the Docker container, such as the\\npresence or absence of specific software, except to assume that the\\ngenerated command line represents a valid command within the runtime\\nenvironment of the container.\\n\\n## Interaction with other requirements\\n\\nIf [EnvVarRequirement](#EnvVarRequirement) is specified alongside a\\nDockerRequirement, the environment variables must be provided to Docker\\nusing `--env` or `--env-file` and interact with the container's preexisting\\nenvironment as defined by Docker.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'DockerRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"dockerPull\",\"type\":[\"null\",\"string\"],\"doc\":\"Specify a Docker image to retrieve using `docker pull`.\"},{\"name\":\"dockerLoad\",\"type\":[\"null\",\"string\"],\"doc\":\"Specify a HTTP URL from which to download a Docker image using `docker load`.\"},{\"name\":\"dockerFile\",\"type\":[\"null\",\"string\"],\"doc\":\"Supply the contents of a Dockerfile which will be built using `docker build`.\"},{\"name\":\"dockerImport\",\"type\":[\"null\",\"string\"],\"doc\":\"Provide HTTP URL to download and gunzip a Docker images using `docker import.\"},{\"name\":\"dockerImageId\",\"type\":[\"null\",\"string\"],\"doc\":\"The image id that will be used for `docker run`.  May be a\\nhuman-readable image name or the image identifier hash.  May be skipped\\nif `dockerPull` is specified, in which case the `dockerPull` image id\\nmust be used.\\n\"},{\"name\":\"dockerOutputDirectory\",\"type\":[\"null\",\"string\"],\"doc\":\"Set the designated output directory to a specific location inside the\\nDocker container.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"SoftwareRequirement\",\"doc\":\"A list of software packages that should be configured in the environment of\\nthe defined process.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'SoftwareRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"packages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SoftwarePackage\",\"fields\":[{\"name\":\"package\",\"type\":\"string\",\"doc\":\"The name of the software to be made available. If the name is\\ncommon, inconsistent, or otherwise ambiguous it should be combined with\\none or more identifiers in the `specs` field.\\n\"},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"The (optional) versions of the software that are known to be\\ncompatible.\\n\"},{\"name\":\"specs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"One or more [IRI](https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier)s\\nidentifying resources for installing or enabling the software named in\\nthe `package` field. Implementations may provide resolvers which map\\nthe","se software identifer IRIs to some configuration action; or they can\\nuse only the name from the `package` field on a best effort basis.\\n\\nFor example, the IRI https://packages.debian.org/bowtie could\\nbe resolved with `apt-get install bowtie`. The IRI\\nhttps://anaconda.org/bioconda/bowtie could be resolved with `conda\\ninstall -c bioconda bowtie`.\\n\\nIRIs can also be system independent and used to map to a specific\\nsoftware installation or selection mechanism.\\nUsing [RRID](https://www.identifiers.org/rrid/) as an example:\\nhttps://identifiers.org/rrid/RRID:SCR_005476\\ncould be fulfilled using the above mentioned Debian or bioconda\\npackage, a local installation managed by [Environement Modules](http://modules.sourceforge.net/),\\nor any other mechanism the platform chooses. IRIs can also be from\\nidentifer sources that are discipline specific yet still system\\nindependent. As an example, the equivalent [ELIXIR Tools and Data\\nService Registry](https://bio.tools) IRI to the previous RRID example is\\nhttps://bio.tools/tool/bowtie2/version/2.2.8.\\nIf supported by a given registry, implementations are encouraged to\\nquery these system independent sofware identifier IRIs directly for\\nlinks to packaging systems.\\n\\nA site specific IRI can be listed as well. For example, an academic\\ncomputing cluster using Environement Modules could list the IRI\\n`https://hpc.example.edu/modules/bowtie-tbb/1.22` to indicate that\\n`module load bowtie-tbb/1.1.2` should be executed to make available\\n`bowtie` version 1.1.2 compiled with the TBB library prior to running\\nthe accompanying Workflow or CommandLineTool. Note that the example IRI\\nis specific to a particular institution and computing environment as\\nthe Environment Modules system does not have a common namespace or\\nstandardized naming convention.\\n\\nThis last example is the least portable and should only be used if\\nmechanisms based off of the `package` field or more generic IRIs are\\nunavailable or unsuitable. While harmless to other sites, site specific\\nsoftware IRIs should be left out of shared CWL descriptions to avoid\\nclutter.\\n\"}]}},\"doc\":\"The list of software to be configured.\",\"jsonldPredicate\":{\"mapSubject\":\"package\",\"mapPredicate\":\"specs\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"InitialWorkDirRequirement\",\"doc\":\"Define a list of files and subdirectories that must be created by the workflow platform in the designated output directory prior to executing the command line tool.\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"InitialWorkDirRequirement\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"listing\",\"type\":[{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"File\",\"doc\":\"Represents a file (or group of files when `secondaryFiles` is provided) that\\nwill be accessible by tools using standard POSIX file system call API such as\\nopen(2) and read(2).\\n\\nFiles are represented as objects with `class` of `File`.  File objects have\\na number of properties that provide metadata about the file.\\n\\nThe `location` property of a File is a URI that uniquely identifies the\\nfile.  Implementations must support the file:// URI scheme and may support\\nother schemes such as http://.  The value of `location` may also be a\\nrelative reference, in which case it must be resolved relative to the URI\\nof the document it appears in.  Alternately to `location`, implementations\\nmust also accept the `path` property on File, which must be a filesystem\\npath available on the same host as the CWL runner (for inputs) or the\\nruntime environment of a command line tool execution (for command line tool\\noutputs).\\n\\nIf no `location` or `path` is specified, a file object must specify\\n`contents` with the UTF-8 text content of the file.  This is a \\\"file\\nliteral\\\".  File literals do not correspond to external resources, but are\\ncreated on disk with `contents` with when needed for a executing a tool.\\nWhere appropriate, expressions can return file literals to define new files\\non a runtime.  The maximum size of `contents` is 64 kilobytes.\\n\\nThe `basename` property defines the filename on disk where the file is\\nstaged.  This may differ from the resource name.  If not provided,\\n`basename` must be computed from the last path part of `location` and made\\navailable to expressions.\\n\\nThe `secondaryFiles` property is a list of File or Directory objects that\\nmust be staged in the same directory as the primary file.  It is an error\\nfor file names to be duplicated in `secondaryFiles`.\\n\\nThe `size` property is the size in bytes of the File.  It must be computed\\nfrom the resource and made available to expressions.  The `checksum` field\\ncontains a cryptographic hash of the file content for use it verifying file\\ncontents.  Implementations may, at user option, enable or disable\\ncomputation of the `checksum` field for performance or other reasons.\\nHowever, the ability to compute output checksums is required to pass the\\nCWL conformance test suite.\\n\\nWhen executing a CommandLineTool, the files and secondary files may be\\nstaged to an arbitrary directory, but must use the value of `basename` for\\nthe filename.  The `path` property must be file path in the context of the\\ntool execution runtime (local to the compute node, or within the executing\\ncontainer).  All computed properties should be available to expressions.\\nFile literals also must be staged and `path` must be set.\\n\\nWhen collecting CommandLineTool outputs, `glob` matching returns file paths\\n(with the `path` property) and the derived properties. This can all be\\nmodified by `outputEval`.  Alternately, if the file `cwl.output.json` is\\npresent in the output, `outputBinding` is ignored.\\n\\nFile objects in the output must provide either a `location` URI or a `path`\\nproperty in the context of the tool execution runtime (local to the compute\\nnode, or within the executing container).\\n\\nWhen evaluating an ExpressionTool, file objects must be referenced via\\n`location` (the expression tool does not have access to files on disk so\\n`path` is meaningless) or as file literals.  It is legal to return a file\\nobject with an existing `location` but a different `basename`.  The\\n`loadContents` field of ExpressionTool inputs behaves the same as on\\nCommandLineTool inputs, however it is not meaningful on the outputs.\\n\\nAn ExpressionTool may forward file references from input to output by using\\nthe same value for `location`.\\n\",\"fields\":[{\"name\":\"class\",\"type\":{\"type\":\"enum\",\"name\":\"File_class\",\"namespace\":\"io.cwl.avro.File.class\",\"symbols\":[\"File\"]},\"doc\":\"Must be `File` to indicate this object describes a file.\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"location\",\"type\":[\"null\",\"string\"],\"doc\":\"An IRI that identifies the file resource.  This may be a relative\\nreference, in which case it must be resolved using the base IRI of the\\ndocument.  The location may refer to a local or remote resource; the\\nimplementation must use the IRI to retrieve file content.  If an\\nimplementation is unable to retrieve the file content stored at a\\nremote resource (due to unsupported protocol, access denied, or other\\nissue) it must signal an error.\\n\\nIf the `location` field is not provided, the `contents` field must be\\nprovided.  The implementation must assign a unique identifier for\\nthe `location` field.\\n\\nIf the `path` field is provided but the `location` field is not, an\\nimplementation may assign the value of the `path` field to `location`,\\nthen follow the rules above.\\n\",\"jsonldPredicate\":{\"_id\":\"@id\",\"_type\":\"@id\"}},{\"name\":\"path\",\"type\":[\"null\",\"string\"],\"doc\":\"The local host path where the File is available when a CommandLineTool is\\nexecuted.  This field must be set by the implementation.  The final\\npath component must match the value of `basename`.  This field\\nmust not be used in any other context.  The command line tool being\\nexecuted must be able to to access the file at `path` using the POSIX\\n`open(2)` syscall.\\n\\nAs a special case, if the `path` field is provided but the `location`\\nfield is not, an implementation may assign the value of the `path`\\nfield to `location`, and remove the `path`"," field.\\n\\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\\\`, `\\\"`, `'`,\\n`<space>`, `<tab>`, and `<newline>`) or characters\\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\\nthen implementations may terminate the process with a\\n`permanentFailure`.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#path\",\"_type\":\"@id\"}},{\"name\":\"basename\",\"type\":[\"null\",\"string\"],\"doc\":\"The base name of the file, that is, the name of the file without any\\nleading directory path.  The base name must not contain a slash `/`.\\n\\nIf not provided, the implementation must set this field based on the\\n`location` field by taking the final path component after parsing\\n`location` as an IRI.  If `basename` is provided, it is not required to\\nmatch the value from `location`.\\n\\nWhen this file is made available to a CommandLineTool, it must be named\\nwith `basename`, i.e. the final component of the `path` field must match\\n`basename`.\\n\",\"jsonldPredicate\":\"cwl:basename\"},{\"name\":\"dirname\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the directory containing file, that is, the path leading up\\nto the final slash in the path such that `dirname + '/' + basename ==\\npath`.\\n\\nThe implementation must set this field based on the value of `path`\\nprior to evaluating parameter references or expressions in a\\nCommandLineTool document.  This field must not be used in any other\\ncontext.\\n\"},{\"name\":\"nameroot\",\"type\":[\"null\",\"string\"],\"doc\":\"The basename root such that `nameroot + nameext == basename`, and\\n`nameext` is empty or begins with a period and contains at most one\\nperiod.  For the purposess of path splitting leading periods on the\\nbasename are ignored; a basename of `.cshrc` will have a nameroot of\\n`.cshrc`.\\n\\nThe implementation must set this field automatically based on the value\\nof `basename` prior to evaluating parameter references or expressions.\\n\"},{\"name\":\"nameext\",\"type\":[\"null\",\"string\"],\"doc\":\"The basename extension such that `nameroot + nameext == basename`, and\\n`nameext` is empty or begins with a period and contains at most one\\nperiod.  Leading periods on the basename are ignored; a basename of\\n`.cshrc` will have an empty `nameext`.\\n\\nThe implementation must set this field automatically based on the value\\nof `basename` prior to evaluating parameter references or expressions.\\n\"},{\"name\":\"checksum\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional hash code for validating file integrity.  Currently must be in the form\\n\\\"sha1$ + hexadecimal string\\\" using the SHA-1 algorithm.\\n\"},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"doc\":\"Optional file size\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"File\",{\"type\":\"record\",\"name\":\"Directory\",\"doc\":\"Represents a directory to present to a command line tool.\\n\\nDirectories are represented as objects with `class` of `Directory`.  Directory objects have\\na number of properties that provide metadata about the directory.\\n\\nThe `location` property of a Directory is a URI that uniquely identifies\\nthe directory.  Implementations must support the file:// URI scheme and may\\nsupport other schemes such as http://.  Alternately to `location`,\\nimplementations must also accept the `path` property on Directory, which\\nmust be a filesystem path available on the same host as the CWL runner (for\\ninputs) or the runtime environment of a command line tool execution (for\\ncommand line tool outputs).\\n\\nA Directory object may have a `listing` field.  This is a list of File and\\nDirectory objects that are contained in the Directory.  For each entry in\\n`listing`, the `basename` property defines the name of the File or\\nSubdirectory when staged to disk.  If `listing` is not provided, the\\nimplementation must have some way of fetching the Directory listing at\\nruntime based on the `location` field.\\n\\nIf a Directory does not have `location`, it is a Directory literal.  A\\nDirectory literal must provide `listing`.  Directory literals must be\\ncreated on disk at runtime as needed.\\n\\nThe resources in a Directory literal do not need to have any implied\\nrelationship in their `location`.  For example, a Directory listing may\\ncontain two files located on different hosts.  It is the responsibility of\\nthe runtime to ensure that those files are staged to disk appropriately.\\nSecondary files associated with files in `listing` must also be staged to\\nthe same Directory.\\n\\nWhen executing a CommandLineTool, Directories must be recursively staged\\nfirst and have local values of `path` assigend.\\n\\nDirectory objects in CommandLineTool output must provide either a\\n`location` URI or a `path` property in the context of the tool execution\\nruntime (local to the compute node, or within the executing container).\\n\\nAn ExpressionTool may forward file references from input to output by using\\nthe same value for `location`.\\n\\nName conflicts (the same `basename` appearing multiple times in `listing`\\nor in any entry in `secondaryFiles` in the listing) is a fatal error.\\n\",\"fields\":[{\"name\":\"class\",\"type\":{\"type\":\"enum\",\"name\":\"Directory_class\",\"namespace\":\"io.cwl.avro.Directory.class\",\"symbols\":[\"Directory\"]},\"doc\":\"Must be `Directory` to indicate this object describes a Directory.\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"location\",\"type\":[\"null\",\"string\"],\"doc\":\"An IRI that identifies the directory resource.  This may be a relative\\nreference, in which case it must be resolved using the base IRI of the\\ndocument.  The location may refer to a local or remote resource.  If\\nthe `listing` field is not set, the implementation must use the\\nlocation IRI to retrieve directory listing.  If an implementation is\\nunable to retrieve the directory listing stored at a remote resource (due to\\nunsupported protocol, access denied, or other issue) it must signal an\\nerror.\\n\\nIf the `location` field is not provided, the `listing` field must be\\nprovided.  The implementation must assign a unique identifier for\\nthe `location` field.\\n\\nIf the `path` field is provided but the `location` field is not, an\\nimplementation may assign the value of the `path` field to `location`,\\nthen follow the rules above.\\n\",\"jsonldPredicate\":{\"_id\":\"@id\",\"_type\":\"@id\"}},{\"name\":\"path\",\"type\":[\"null\",\"string\"],\"doc\":\"The local path where the Directory is made available prior to executing a\\nCommandLineTool.  This must be set by the implementation.  This field\\nmust not be used in any other context.  The command line tool being\\nexecuted must be able to to access the directory at `path` using the POSIX\\n`opendir(2)` syscall.\\n\\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\\\`, `\\\"`, `'`,\\n`<space>`, `<tab>`, and `<newline>`) or characters\\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\\nthen implementations may terminate the process with a\\n`permanentFailure`.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#path\",\"_type\":\"@id\"}},{\"name\":\"basename\",\"type\":[\"null\",\"string\"],\"doc\":\"The base name of the directory, that is, the name of the file without any\\nleading directory path.  The base name must not contain a slash `/`.\\n\\nIf not provided, the implementation must set this field based on the\\n`location` field by taking the final path component after parsing\\n`location` as an IRI.  If `basename` is provided, it is not required to\\nmatch the value from `location`.\\n\\nWhen this file is made available to a CommandLineTool, it must be named\\nwith `basename`, i.e. the final component of the `path` field must match\\n`basename`.\\n\",\"jsonldPredicate\":\"cwl:basename\"},{\"name\":\"listing\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"File\",\"Directory\"]}],\"doc\":\"List of files or subdirectories contained in this directory.  The n","ame\\nof each file or subdirectory is determined by the `basename` field of\\neach `File` or `Directory` object.  It is an error if a `File` shares a\\n`basename` with any other entry in `listing`.  If two or more\\n`Directory` object share the same `basename`, this must be treated as\\nequivalent to a single subdirectory with the listings recursively\\nmerged.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#listing\"}}],\"docAfter\":\"https://w3id.org/cwl/cwl#File\"}]}],\"doc\":\"A list of additional files or directories that are associated with the\\nprimary file and must be transferred alongside the primary file.\\nExamples include indexes of the primary file, or external references\\nwhich must be included when loading primary document.  A file object\\nlisted in `secondaryFiles` may itself include `secondaryFiles` for\\nwhich the same rules apply.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\"},{\"name\":\"format\",\"type\":[\"null\",\"string\"],\"doc\":\"The format of the file: this must be an IRI of a concept node that\\nrepresents the file format, preferrably defined within an ontology.\\nIf no ontology is available, file formats may be tested by exact match.\\n\\nReasoning about format compatability must be done by checking that an\\ninput file format is the same, `owl:equivalentClass` or\\n`rdfs:subClassOf` the format required by the input parameter.\\n`owl:equivalentClass` is transitive with `rdfs:subClassOf`, e.g. if\\n`B owl:equivalentClass C` and `B owl:subclassOf A` then infer\\n`C owl:subclassOf A`.\\n\\nFile format ontologies may be provided in the \\\"$schemas\\\" metadata at the\\nroot of the document.  If no ontologies are specified in `$schemas`, the\\nruntime may perform exact file format matches.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#format\",\"_type\":\"@id\",\"identity\":true}},{\"name\":\"contents\",\"type\":[\"null\",\"string\"],\"doc\":\"File contents literal.  Maximum of 64 KiB.\\n\\nIf neither `location` nor `path` is provided, `contents` must be\\nnon-null.  The implementation must assign a unique identifier for the\\n`location` field.  When the file is staged as input to CommandLineTool,\\nthe value of `contents` must be written to a file.\\n\\nIf `loadContents` of `inputBinding` or `outputBinding` is true and\\n`location` is valid, the implementation must read up to the first 64\\nKiB of text from the file and place it in the \\\"contents\\\" field.\\n\"}],\"docParent\":\"https://w3id.org/cwl/cwl#CWLType\"},\"Directory\",{\"type\":\"record\",\"name\":\"Dirent\",\"doc\":\"Define a file or subdirectory that must be placed in the designated output\\ndirectory prior to executing the command line tool.  May be the result of\\nexecuting an expression, such as building a configuration file from a\\ntemplate.\\n\",\"fields\":[{\"name\":\"entryname\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"The name of the file or subdirectory to create in the output directory.\\nIf `entry` is a File or Directory, the `entryname` field overrides the value\\nof `basename` of the File or Directory object.  Optional.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#entryname\"}},{\"name\":\"entry\",\"type\":[\"string\",\"Expression\"],\"doc\":\"If the value is a string literal or an expression which evaluates to a\\nstring, a new file must be created with the string as the file contents.\\n\\nIf the value is an expression that evaluates to a `File` object, this\\nindicates the referenced file should be added to the designated output\\ndirectory prior to executing the tool.\\n\\nIf the value is an expression that evaluates to a `Dirent` object, this\\nindicates that the File or Directory in `entry` should be added to the\\ndesignated output directory with the name in `entryname`.\\n\\nIf `writable` is false, the file may be made available using a bind\\nmount or file system link to avoid unnecessary copying of the input\\nfile.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#entry\"}},{\"name\":\"writable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true, the file or directory must be writable by the tool.  Changes\\nto the file or directory must be isolated and not visible by any other\\nCommandLineTool process.  This may be implemented by making a copy of\\nthe original file or directory.  Default false (files and directories\\nread-only by default).\\n\\nA directory marked as `writable: true` implies that all files and\\nsubdirectories are recursively writable as well.\\n\"}]},\"string\",\"Expression\"]},\"string\",\"Expression\"],\"doc\":\"The list of files or subdirectories that must be placed in the\\ndesignated output directory prior to executing the command line tool.\\n\\nMay be an expression.  If so, the expression return value must validate\\nas `{type: array, items: [File, Directory]}`.\\n\\nFiles or Directories which are listed in the input parameters and\\nappear in the `InitialWorkDirRequirement` listing must have their\\n`path` set to their staged location in the designated output directory.\\nIf the same File or Directory appears more than once in the\\n`InitialWorkDirRequirement` listing, the implementation must choose\\nexactly one value for `path`; how this value is chosen is undefined.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#listing\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"EnvVarRequirement\",\"doc\":\"Define a list of environment variables which will be set in the\\nexecution environment of the tool.  See `EnvironmentDef` for details.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'EnvVarRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"envDef\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EnvironmentDef\",\"doc\":\"Define an environment variable that will be set in the runtime environment\\nby the workflow platform when executing the command line tool.  May be the\\nresult of executing an expression, such as getting a parameter from input.\\n\",\"fields\":[{\"name\":\"envName\",\"type\":\"string\",\"doc\":\"The environment variable name\"},{\"name\":\"envValue\",\"type\":[\"string\",\"Expression\"],\"doc\":\"The environment variable value\"}]}},\"doc\":\"The list of environment variables.\",\"jsonldPredicate\":{\"mapSubject\":\"envName\",\"mapPredicate\":\"envValue\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"ShellCommandRequirement\",\"doc\":\"Modify the behavior of CommandLineTool to generate a single string\\ncontaining a shell command line.  Each item in the argument list must be\\njoined into a string separated by single spaces and quoted to prevent\\nintepretation by the shell, unless `CommandLineBinding` for that argument\\ncontains `shellQuote: false`.  If `shellQuote: false` is specified, the\\nargument is joined into the command string without quoting, which allows\\nthe use of shell metacharacters such as `|` for pipes.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'ShellCommandRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"ResourceRequirement\",\"doc\":\"Specify basic hardware resource requirements.\\n\\n\\\"min\\\" is the minimum amount of a resource that must be reserved to schedule\\na job. If \\\"min\\\" cannot be satisfied, the job should not be run.\\n\\n\\\"max\\\" is the maximum amount of a resource that the job shall be permitted\\nto use. If a node has sufficient resources, multiple jobs may be scheduled\\non a single node provided each job's \\\"max\\\" resource requirements are\\nmet. If a job attempts to exceed its \\\"max\\\" resource allocation, an\\nimplementation may deny additional resources, which may result in job\\nfailure.\\n\\nIf \\\"min\\\" is specified but \\\"max\\\" is not, then \\\"max\\\" == \\\"min\\\"\\nIf \\\"max\\\" is specified by \\\"min\\\" is not, then \\\"min\\\" == \\\"max\\\".\\n\\nIt is an error if max < min.\\n\\nIt is an error if the value of any of these fields is negative.\\n\\nIf neither \\\"min\\\" nor \\\"max\\\" is specified for a resource, an implementation may provide a default.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'ResourceRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"coresMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved number of CPU cores\"},{\"name\":\"coresMax\",\"type\":[\"null\",\"int\",\"string\",\"Expression\"],\"doc\"",":\"Maximum reserved number of CPU cores\"},{\"name\":\"ramMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved RAM in mebibytes (2**20)\"},{\"name\":\"ramMax\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved RAM in mebibytes (2**20)\"},{\"name\":\"tmpdirMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)\"},{\"name\":\"tmpdirMax\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)\"},{\"name\":\"outdirMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)\"},{\"name\":\"outdirMax\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"SubworkflowFeatureRequirement\",\"doc\":\"Indicates that the workflow platform must support nested workflows in\\nthe `run` field of [WorkflowStep](#WorkflowStep).\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'SubworkflowFeatureRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"ScatterFeatureRequirement\",\"doc\":\"Indicates that the workflow platform must support the `scatter` and\\n`scatterMethod` fields of [WorkflowStep](#WorkflowStep).\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'ScatterFeatureRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"MultipleInputFeatureRequirement\",\"doc\":\"Indicates that the workflow platform must support multiple inbound data links\\nlisted in the `source` field of [WorkflowStepInput](#WorkflowStepInput).\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'MultipleInputFeatureRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"StepInputExpressionRequirement\",\"doc\":\"Indicate that the workflow platform must support the `valueFrom` field\\nof [WorkflowStepInput](#WorkflowStepInput).\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'StepInputExpressionRequirement'\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}]}],\"doc\":\"Declares requirements that apply to either the runtime environment or the\\nworkflow engine that must be met in order to execute this process.  If\\nan implementation cannot satisfy all requirements, or a requirement is\\nlisted which is not recognized by the implementation, it is a fatal\\nerror and the implementation must not attempt to run the process,\\nunless overridden at user option.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#requirements\",\"mapSubject\":\"class\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"hints\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Any\"}],\"doc\":\"Declares hints applying to either the runtime environment or the\\nworkflow engine that may be helpful in executing this process.  It is\\nnot an error if an implementation cannot satisfy all hints, however\\nthe implementation may report a warning.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#hints\",\"noLinkCheck\":true,\"mapSubject\":\"class\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this process object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A long, human-readable description of this process object.\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"cwlVersion\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"CWLVersion\",\"doc\":\"Version symbols for published CWL document versions.\",\"symbols\":[]}],\"doc\":\"CWL document version. Always required at the document root. Not\\nrequired for a Process embedded inside another Process.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#cwlVersion\",\"_type\":\"@vocab\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"class\",\"type\":\"string\",\"jsonldPredicate\":{\"_id\":\"@type\",\"_type\":\"@vocab\"}},{\"name\":\"baseCommand\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Specifies the program to execute.  If an array, the first element of\\nthe array is the command to execute, and subsequent elements are\\nmandatory command line arguments.  The elements in `baseCommand` must\\nappear before any command line bindings from `inputBinding` or\\n`arguments`.\\n\\nIf `baseCommand` is not provided or is an empty array, the first\\nelement of the command line produced after processing `inputBinding` or\\n`arguments` must be used as the program to execute.\\n\\nIf the program includes a path separator character it must\\nbe an absolute path, otherwise it is an error.  If the program does not\\ninclude a path separator, search the `$PATH` variable in the runtime\\nenvironment of the workflow runner find the absolute path of the\\nexecutable.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#baseCommand\",\"_container\":\"@list\"}},{\"name\":\"arguments\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"string\",\"Expression\",\"CommandLineBinding\"]}],\"doc\":\"Command line bindings which are not directly associated with input parameters.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#arguments\",\"_container\":\"@list\"}},{\"name\":\"stdin\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"A path to a file whose contents must be piped into the command's\\nstandard input stream.\\n\"},{\"name\":\"stderr\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"Capture the command's standard error stream to a file written to\\nthe designated output directory.\\n\\nIf `stderr` is a string, it specifies the file name to use.\\n\\nIf `stderr` is an expression, the expression is evaluated and must\\nreturn a string with the file name to use to capture stderr.  If the\\nreturn value is not a string, or the resulting path contains illegal\\ncharacters (such as the path separator `/`) it is an error.\\n\",\"jsonldPredicate\":\"https://w3id.org/cwl/cwl#stderr\"},{\"name\":\"stdout\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"Capture the command's standard output stream to a file written to\\nthe designated output directory.\\n\\nIf `stdout` is a string, it specifies the file name to use.\\n\\nIf `stdout` is an expression, the expression is evaluated and must\\nreturn a string with the file name to use to capture stdout.  If the\\nreturn value is not a string, or the resulting path contains illegal\\ncharacters (such as the path separator `/`) it is an error.\\n\",\"jsonldPredicate\":\"https://w3id.org/cwl/cwl#stdout\"},{\"name\":\"successCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"doc\":\"Exit codes that indicate the process completed successfully.\\n\"},{\"name\":\"temporaryFailCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"doc\":\"Exit codes that indicate the process failed due to a possibly\\ntemporary condition, where executing the process with the same\\nruntime environment and inputs may produce different results.\\n\"},{\"name\":\"permanentFailCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"doc\":\"Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.\"}],\"extends\":\"https://w3id.org/cwl/cwl#Process\",\"documentRoot\":true,\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputParameter\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputParameter\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputParameter\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputParameter\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CommandLineTool> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CommandLineTool> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CommandLineTool> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CommandLineTool> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CommandLineTool> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CommandLineTool to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CommandLineTool from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CommandLineTool instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CommandLineTool fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique identifier for this process object. */
  public java.lang.CharSequence id;
  /** Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.

When accepting an input object, all input parameters must have a value.
If an input parameter is missing from the input object, it must be
assigned a value of `null` (or the value of `default` for that
parameter, if provided) for the purposes of validation and evaluation
of expressions.
 */
  public java.util.List<io.cwl.avro.CommandInputParameter> inputs;
  /** Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.
 */
  public java.util.List<io.cwl.avro.CommandOutputParameter> outputs;
  /** Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.
 */
  public java.util.List<java.lang.Object> requirements;
  /** Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.
 */
  public java.util.List<Object> hints;
  /** A short, human-readable label of this process object. */
  public java.lang.CharSequence label;
  /** A long, human-readable description of this process object. */
  public java.lang.CharSequence doc;
  /** CWL document version. Always required at the document root. Not
required for a Process embedded inside another Process.
 */
  public io.cwl.avro.CWLVersion cwlVersion;
  public java.lang.CharSequence class$;
  /** Specifies the program to execute.  If an array, the first element of
the array is the command to execute, and subsequent elements are
mandatory command line arguments.  The elements in `baseCommand` must
appear before any command line bindings from `inputBinding` or
`arguments`.

If `baseCommand` is not provided or is an empty array, the first
element of the command line produced after processing `inputBinding` or
`arguments` must be used as the program to execute.

If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.
 */
  public java.lang.Object baseCommand;
  /** Command line bindings which are not directly associated with input parameters.
 */
  public java.util.List<java.lang.Object> arguments;
  /** A path to a file whose contents must be piped into the command's
standard input stream.
 */
  public java.lang.Object stdin;
  /** Capture the command's standard error stream to a file written to
the designated output directory.

If `stderr` is a string, it specifies the file name to use.

If `stderr` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stderr.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.
 */
  public java.lang.Object stderr;
  /** Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.
 */
  public java.lang.Object stdout;
  /** Exit codes that indicate the process completed successfully.
 */
  public java.util.List<java.lang.Integer> successCodes;
  /** Exit codes that indicate the process failed due to a possibly
temporary condition, where executing the process with the same
runtime environment and inputs may produce different results.
 */
  public java.util.List<java.lang.Integer> temporaryFailCodes;
  /** Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail. */
  public java.util.List<java.lang.Integer> permanentFailCodes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommandLineTool() {}

  /**
   * All-args constructor.
   * @param id The unique identifier for this process object.
   * @param inputs Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.

When accepting an input object, all input parameters must have a value.
If an input parameter is missing from the input object, it must be
assigned a value of `null` (or the value of `default` for that
parameter, if provided) for the purposes of validation and evaluation
of expressions.

   * @param outputs Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.

   * @param requirements Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.

   * @param hints Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.

   * @param label A short, human-readable label of this process object.
   * @param doc A long, human-readable description of this process object.
   * @param cwlVersion CWL document version. Always required at the document root. Not
required for a Process embedded inside another Process.

   * @param class$ The new value for class
   * @param baseCommand Specifies the program to execute.  If an array, the first element of
the array is the command to execute, and subsequent elements are
mandatory command line arguments.  The elements in `baseCommand` must
appear before any command line bindings from `inputBinding` or
`arguments`.

If `baseCommand` is not provided or is an empty array, the first
element of the command line produced after processing `inputBinding` or
`arguments` must be used as the program to execute.

If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.

   * @param arguments Command line bindings which are not directly associated with input parameters.

   * @param stdin A path to a file whose contents must be piped into the command's
standard input stream.

   * @param stderr Capture the command's standard error stream to a file written to
the designated output directory.

If `stderr` is a string, it specifies the file name to use.

If `stderr` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stderr.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

   * @param stdout Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

   * @param successCodes Exit codes that indicate the process completed successfully.

   * @param temporaryFailCodes Exit codes that indicate the process failed due to a possibly
temporary condition, where executing the process with the same
runtime environment and inputs may produce different results.

   * @param permanentFailCodes Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.
   */
  public CommandLineTool(java.lang.CharSequence id, java.util.List<io.cwl.avro.CommandInputParameter> inputs, java.util.List<io.cwl.avro.CommandOutputParameter> outputs, java.util.List<java.lang.Object> requirements, java.util.List<Object> hints, java.lang.CharSequence label, java.lang.CharSequence doc, io.cwl.avro.CWLVersion cwlVersion, java.lang.CharSequence class$, java.lang.Object baseCommand, java.util.List<java.lang.Object> arguments, java.lang.Object stdin, java.lang.Object stderr, java.lang.Object stdout, java.util.List<java.lang.Integer> successCodes, java.util.List<java.lang.Integer> temporaryFailCodes, java.util.List<java.lang.Integer> permanentFailCodes) {
    this.id = id;
    this.inputs = inputs;
    this.outputs = outputs;
    this.requirements = requirements;
    this.hints = hints;
    this.label = label;
    this.doc = doc;
    this.cwlVersion = cwlVersion;
    this.class$ = class$;
    this.baseCommand = baseCommand;
    this.arguments = arguments;
    this.stdin = stdin;
    this.stderr = stderr;
    this.stdout = stdout;
    this.successCodes = successCodes;
    this.temporaryFailCodes = temporaryFailCodes;
    this.permanentFailCodes = permanentFailCodes;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return inputs;
    case 2: return outputs;
    case 3: return requirements;
    case 4: return hints;
    case 5: return label;
    case 6: return doc;
    case 7: return cwlVersion;
    case 8: return class$;
    case 9: return baseCommand;
    case 10: return arguments;
    case 11: return stdin;
    case 12: return stderr;
    case 13: return stdout;
    case 14: return successCodes;
    case 15: return temporaryFailCodes;
    case 16: return permanentFailCodes;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: inputs = (java.util.List<io.cwl.avro.CommandInputParameter>)value$; break;
    case 2: outputs = (java.util.List<io.cwl.avro.CommandOutputParameter>)value$; break;
    case 3: requirements = (java.util.List<java.lang.Object>)value$; break;
    case 4: hints = (java.util.List<Object>)value$; break;
    case 5: label = (java.lang.CharSequence)value$; break;
    case 6: doc = (java.lang.CharSequence)value$; break;
    case 7: cwlVersion = (io.cwl.avro.CWLVersion)value$; break;
    case 8: class$ = (java.lang.CharSequence)value$; break;
    case 9: baseCommand = value$; break;
    case 10: arguments = (java.util.List<java.lang.Object>)value$; break;
    case 11: stdin = value$; break;
    case 12: stderr = value$; break;
    case 13: stdout = value$; break;
    case 14: successCodes = (java.util.List<java.lang.Integer>)value$; break;
    case 15: temporaryFailCodes = (java.util.List<java.lang.Integer>)value$; break;
    case 16: permanentFailCodes = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The unique identifier for this process object.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * The unique identifier for this process object.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'inputs' field.
   * @return Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.

When accepting an input object, all input parameters must have a value.
If an input parameter is missing from the input object, it must be
assigned a value of `null` (or the value of `default` for that
parameter, if provided) for the purposes of validation and evaluation
of expressions.

   */
  public java.util.List<io.cwl.avro.CommandInputParameter> getInputs() {
    return inputs;
  }


  /**
   * Sets the value of the 'inputs' field.
   * Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.

When accepting an input object, all input parameters must have a value.
If an input parameter is missing from the input object, it must be
assigned a value of `null` (or the value of `default` for that
parameter, if provided) for the purposes of validation and evaluation
of expressions.

   * @param value the value to set.
   */
  public void setInputs(java.util.List<io.cwl.avro.CommandInputParameter> value) {
    this.inputs = value;
  }

  /**
   * Gets the value of the 'outputs' field.
   * @return Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.

   */
  public java.util.List<io.cwl.avro.CommandOutputParameter> getOutputs() {
    return outputs;
  }


  /**
   * Sets the value of the 'outputs' field.
   * Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.

   * @param value the value to set.
   */
  public void setOutputs(java.util.List<io.cwl.avro.CommandOutputParameter> value) {
    this.outputs = value;
  }

  /**
   * Gets the value of the 'requirements' field.
   * @return Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.

   */
  public java.util.List<java.lang.Object> getRequirements() {
    return requirements;
  }


  /**
   * Sets the value of the 'requirements' field.
   * Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.

   * @param value the value to set.
   */
  public void setRequirements(java.util.List<java.lang.Object> value) {
    this.requirements = value;
  }

  /**
   * Gets the value of the 'hints' field.
   * @return Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.

   */
  public java.util.List<Object> getHints() {
    return hints;
  }


  /**
   * Sets the value of the 'hints' field.
   * Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.

   * @param value the value to set.
   */
  public void setHints(java.util.List<Object> value) {
    this.hints = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return A short, human-readable label of this process object.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }


  /**
   * Sets the value of the 'label' field.
   * A short, human-readable label of this process object.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'doc' field.
   * @return A long, human-readable description of this process object.
   */
  public java.lang.CharSequence getDoc() {
    return doc;
  }


  /**
   * Sets the value of the 'doc' field.
   * A long, human-readable description of this process object.
   * @param value the value to set.
   */
  public void setDoc(java.lang.CharSequence value) {
    this.doc = value;
  }

  /**
   * Gets the value of the 'cwlVersion' field.
   * @return CWL document version. Always required at the document root. Not
required for a Process embedded inside another Process.

   */
  public io.cwl.avro.CWLVersion getCwlVersion() {
    return cwlVersion;
  }


  /**
   * Sets the value of the 'cwlVersion' field.
   * CWL document version. Always required at the document root. Not
required for a Process embedded inside another Process.

   * @param value the value to set.
   */
  public void setCwlVersion(io.cwl.avro.CWLVersion value) {
    this.cwlVersion = value;
  }

  /**
   * Gets the value of the 'class$' field.
   * @return The value of the 'class$' field.
   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }


  /**
   * Sets the value of the 'class$' field.
   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'baseCommand' field.
   * @return Specifies the program to execute.  If an array, the first element of
the array is the command to execute, and subsequent elements are
mandatory command line arguments.  The elements in `baseCommand` must
appear before any command line bindings from `inputBinding` or
`arguments`.

If `baseCommand` is not provided or is an empty array, the first
element of the command line produced after processing `inputBinding` or
`arguments` must be used as the program to execute.

If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.

   */
  public java.lang.Object getBaseCommand() {
    return baseCommand;
  }


  /**
   * Sets the value of the 'baseCommand' field.
   * Specifies the program to execute.  If an array, the first element of
the array is the command to execute, and subsequent elements are
mandatory command line arguments.  The elements in `baseCommand` must
appear before any command line bindings from `inputBinding` or
`arguments`.

If `baseCommand` is not provided or is an empty array, the first
element of the command line produced after processing `inputBinding` or
`arguments` must be used as the program to execute.

If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.

   * @param value the value to set.
   */
  public void setBaseCommand(java.lang.Object value) {
    this.baseCommand = value;
  }

  /**
   * Gets the value of the 'arguments' field.
   * @return Command line bindings which are not directly associated with input parameters.

   */
  public java.util.List<java.lang.Object> getArguments() {
    return arguments;
  }


  /**
   * Sets the value of the 'arguments' field.
   * Command line bindings which are not directly associated with input parameters.

   * @param value the value to set.
   */
  public void setArguments(java.util.List<java.lang.Object> value) {
    this.arguments = value;
  }

  /**
   * Gets the value of the 'stdin' field.
   * @return A path to a file whose contents must be piped into the command's
standard input stream.

   */
  public java.lang.Object getStdin() {
    return stdin;
  }


  /**
   * Sets the value of the 'stdin' field.
   * A path to a file whose contents must be piped into the command's
standard input stream.

   * @param value the value to set.
   */
  public void setStdin(java.lang.Object value) {
    this.stdin = value;
  }

  /**
   * Gets the value of the 'stderr' field.
   * @return Capture the command's standard error stream to a file written to
the designated output directory.

If `stderr` is a string, it specifies the file name to use.

If `stderr` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stderr.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

   */
  public java.lang.Object getStderr() {
    return stderr;
  }


  /**
   * Sets the value of the 'stderr' field.
   * Capture the command's standard error stream to a file written to
the designated output directory.

If `stderr` is a string, it specifies the file name to use.

If `stderr` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stderr.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

   * @param value the value to set.
   */
  public void setStderr(java.lang.Object value) {
    this.stderr = value;
  }

  /**
   * Gets the value of the 'stdout' field.
   * @return Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

   */
  public java.lang.Object getStdout() {
    return stdout;
  }


  /**
   * Sets the value of the 'stdout' field.
   * Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

   * @param value the value to set.
   */
  public void setStdout(java.lang.Object value) {
    this.stdout = value;
  }

  /**
   * Gets the value of the 'successCodes' field.
   * @return Exit codes that indicate the process completed successfully.

   */
  public java.util.List<java.lang.Integer> getSuccessCodes() {
    return successCodes;
  }


  /**
   * Sets the value of the 'successCodes' field.
   * Exit codes that indicate the process completed successfully.

   * @param value the value to set.
   */
  public void setSuccessCodes(java.util.List<java.lang.Integer> value) {
    this.successCodes = value;
  }

  /**
   * Gets the value of the 'temporaryFailCodes' field.
   * @return Exit codes that indicate the process failed due to a possibly
temporary condition, where executing the process with the same
runtime environment and inputs may produce different results.

   */
  public java.util.List<java.lang.Integer> getTemporaryFailCodes() {
    return temporaryFailCodes;
  }


  /**
   * Sets the value of the 'temporaryFailCodes' field.
   * Exit codes that indicate the process failed due to a possibly
temporary condition, where executing the process with the same
runtime environment and inputs may produce different results.

   * @param value the value to set.
   */
  public void setTemporaryFailCodes(java.util.List<java.lang.Integer> value) {
    this.temporaryFailCodes = value;
  }

  /**
   * Gets the value of the 'permanentFailCodes' field.
   * @return Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.
   */
  public java.util.List<java.lang.Integer> getPermanentFailCodes() {
    return permanentFailCodes;
  }


  /**
   * Sets the value of the 'permanentFailCodes' field.
   * Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.
   * @param value the value to set.
   */
  public void setPermanentFailCodes(java.util.List<java.lang.Integer> value) {
    this.permanentFailCodes = value;
  }

  /**
   * Creates a new CommandLineTool RecordBuilder.
   * @return A new CommandLineTool RecordBuilder
   */
  public static io.cwl.avro.CommandLineTool.Builder newBuilder() {
    return new io.cwl.avro.CommandLineTool.Builder();
  }

  /**
   * Creates a new CommandLineTool RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommandLineTool RecordBuilder
   */
  public static io.cwl.avro.CommandLineTool.Builder newBuilder(io.cwl.avro.CommandLineTool.Builder other) {
    if (other == null) {
      return new io.cwl.avro.CommandLineTool.Builder();
    } else {
      return new io.cwl.avro.CommandLineTool.Builder(other);
    }
  }

  /**
   * Creates a new CommandLineTool RecordBuilder by copying an existing CommandLineTool instance.
   * @param other The existing instance to copy.
   * @return A new CommandLineTool RecordBuilder
   */
  public static io.cwl.avro.CommandLineTool.Builder newBuilder(io.cwl.avro.CommandLineTool other) {
    if (other == null) {
      return new io.cwl.avro.CommandLineTool.Builder();
    } else {
      return new io.cwl.avro.CommandLineTool.Builder(other);
    }
  }

  /**
   * RecordBuilder for CommandLineTool instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommandLineTool>
    implements org.apache.avro.data.RecordBuilder<CommandLineTool> {

    /** The unique identifier for this process object. */
    private java.lang.CharSequence id;
    /** Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.

When accepting an input object, all input parameters must have a value.
If an input parameter is missing from the input object, it must be
assigned a value of `null` (or the value of `default` for that
parameter, if provided) for the purposes of validation and evaluation
of expressions.
 */
    private java.util.List<io.cwl.avro.CommandInputParameter> inputs;
    /** Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.
 */
    private java.util.List<io.cwl.avro.CommandOutputParameter> outputs;
    /** Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.
 */
    private java.util.List<java.lang.Object> requirements;
    /** Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.
 */
    private java.util.List<Object> hints;
    /** A short, human-readable label of this process object. */
    private java.lang.CharSequence label;
    /** A long, human-readable description of this process object. */
    private java.lang.CharSequence doc;
    /** CWL document version. Always required at the document root. Not
required for a Process embedded inside another Process.
 */
    private io.cwl.avro.CWLVersion cwlVersion;
    private java.lang.CharSequence class$;
    /** Specifies the program to execute.  If an array, the first element of
the array is the command to execute, and subsequent elements are
mandatory command line arguments.  The elements in `baseCommand` must
appear before any command line bindings from `inputBinding` or
`arguments`.

If `baseCommand` is not provided or is an empty array, the first
element of the command line produced after processing `inputBinding` or
`arguments` must be used as the program to execute.

If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.
 */
    private java.lang.Object baseCommand;
    /** Command line bindings which are not directly associated with input parameters.
 */
    private java.util.List<java.lang.Object> arguments;
    /** A path to a file whose contents must be piped into the command's
standard input stream.
 */
    private java.lang.Object stdin;
    /** Capture the command's standard error stream to a file written to
the designated output directory.

If `stderr` is a string, it specifies the file name to use.

If `stderr` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stderr.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.
 */
    private java.lang.Object stderr;
    /** Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.
 */
    private java.lang.Object stdout;
    /** Exit codes that indicate the process completed successfully.
 */
    private java.util.List<java.lang.Integer> successCodes;
    /** Exit codes that indicate the process failed due to a possibly
temporary condition, where executing the process with the same
runtime environment and inputs may produce different results.
 */
    private java.util.List<java.lang.Integer> temporaryFailCodes;
    /** Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail. */
    private java.util.List<java.lang.Integer> permanentFailCodes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cwl.avro.CommandLineTool.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.inputs)) {
        this.inputs = data().deepCopy(fields()[1].schema(), other.inputs);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.outputs)) {
        this.outputs = data().deepCopy(fields()[2].schema(), other.outputs);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.requirements)) {
        this.requirements = data().deepCopy(fields()[3].schema(), other.requirements);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.hints)) {
        this.hints = data().deepCopy(fields()[4].schema(), other.hints);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.label)) {
        this.label = data().deepCopy(fields()[5].schema(), other.label);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.doc)) {
        this.doc = data().deepCopy(fields()[6].schema(), other.doc);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.cwlVersion)) {
        this.cwlVersion = data().deepCopy(fields()[7].schema(), other.cwlVersion);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.class$)) {
        this.class$ = data().deepCopy(fields()[8].schema(), other.class$);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.baseCommand)) {
        this.baseCommand = data().deepCopy(fields()[9].schema(), other.baseCommand);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.arguments)) {
        this.arguments = data().deepCopy(fields()[10].schema(), other.arguments);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.stdin)) {
        this.stdin = data().deepCopy(fields()[11].schema(), other.stdin);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.stderr)) {
        this.stderr = data().deepCopy(fields()[12].schema(), other.stderr);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.stdout)) {
        this.stdout = data().deepCopy(fields()[13].schema(), other.stdout);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.successCodes)) {
        this.successCodes = data().deepCopy(fields()[14].schema(), other.successCodes);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.temporaryFailCodes)) {
        this.temporaryFailCodes = data().deepCopy(fields()[15].schema(), other.temporaryFailCodes);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.permanentFailCodes)) {
        this.permanentFailCodes = data().deepCopy(fields()[16].schema(), other.permanentFailCodes);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
    }

    /**
     * Creates a Builder by copying an existing CommandLineTool instance
     * @param other The existing instance to copy.
     */
    private Builder(io.cwl.avro.CommandLineTool other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.inputs)) {
        this.inputs = data().deepCopy(fields()[1].schema(), other.inputs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outputs)) {
        this.outputs = data().deepCopy(fields()[2].schema(), other.outputs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.requirements)) {
        this.requirements = data().deepCopy(fields()[3].schema(), other.requirements);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hints)) {
        this.hints = data().deepCopy(fields()[4].schema(), other.hints);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.label)) {
        this.label = data().deepCopy(fields()[5].schema(), other.label);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.doc)) {
        this.doc = data().deepCopy(fields()[6].schema(), other.doc);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cwlVersion)) {
        this.cwlVersion = data().deepCopy(fields()[7].schema(), other.cwlVersion);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.class$)) {
        this.class$ = data().deepCopy(fields()[8].schema(), other.class$);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.baseCommand)) {
        this.baseCommand = data().deepCopy(fields()[9].schema(), other.baseCommand);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.arguments)) {
        this.arguments = data().deepCopy(fields()[10].schema(), other.arguments);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.stdin)) {
        this.stdin = data().deepCopy(fields()[11].schema(), other.stdin);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.stderr)) {
        this.stderr = data().deepCopy(fields()[12].schema(), other.stderr);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.stdout)) {
        this.stdout = data().deepCopy(fields()[13].schema(), other.stdout);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.successCodes)) {
        this.successCodes = data().deepCopy(fields()[14].schema(), other.successCodes);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.temporaryFailCodes)) {
        this.temporaryFailCodes = data().deepCopy(fields()[15].schema(), other.temporaryFailCodes);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.permanentFailCodes)) {
        this.permanentFailCodes = data().deepCopy(fields()[16].schema(), other.permanentFailCodes);
        fieldSetFlags()[16] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * The unique identifier for this process object.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * The unique identifier for this process object.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * The unique identifier for this process object.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * The unique identifier for this process object.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'inputs' field.
      * Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.

When accepting an input object, all input parameters must have a value.
If an input parameter is missing from the input object, it must be
assigned a value of `null` (or the value of `default` for that
parameter, if provided) for the purposes of validation and evaluation
of expressions.

      * @return The value.
      */
    public java.util.List<io.cwl.avro.CommandInputParameter> getInputs() {
      return inputs;
    }


    /**
      * Sets the value of the 'inputs' field.
      * Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.

When accepting an input object, all input parameters must have a value.
If an input parameter is missing from the input object, it must be
assigned a value of `null` (or the value of `default` for that
parameter, if provided) for the purposes of validation and evaluation
of expressions.

      * @param value The value of 'inputs'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setInputs(java.util.List<io.cwl.avro.CommandInputParameter> value) {
      validate(fields()[1], value);
      this.inputs = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'inputs' field has been set.
      * Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.

When accepting an input object, all input parameters must have a value.
If an input parameter is missing from the input object, it must be
assigned a value of `null` (or the value of `default` for that
parameter, if provided) for the purposes of validation and evaluation
of expressions.

      * @return True if the 'inputs' field has been set, false otherwise.
      */
    public boolean hasInputs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'inputs' field.
      * Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.

When accepting an input object, all input parameters must have a value.
If an input parameter is missing from the input object, it must be
assigned a value of `null` (or the value of `default` for that
parameter, if provided) for the purposes of validation and evaluation
of expressions.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearInputs() {
      inputs = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'outputs' field.
      * Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.

      * @return The value.
      */
    public java.util.List<io.cwl.avro.CommandOutputParameter> getOutputs() {
      return outputs;
    }


    /**
      * Sets the value of the 'outputs' field.
      * Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.

      * @param value The value of 'outputs'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setOutputs(java.util.List<io.cwl.avro.CommandOutputParameter> value) {
      validate(fields()[2], value);
      this.outputs = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'outputs' field has been set.
      * Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.

      * @return True if the 'outputs' field has been set, false otherwise.
      */
    public boolean hasOutputs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'outputs' field.
      * Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearOutputs() {
      outputs = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'requirements' field.
      * Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.

      * @return The value.
      */
    public java.util.List<java.lang.Object> getRequirements() {
      return requirements;
    }


    /**
      * Sets the value of the 'requirements' field.
      * Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.

      * @param value The value of 'requirements'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setRequirements(java.util.List<java.lang.Object> value) {
      validate(fields()[3], value);
      this.requirements = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'requirements' field has been set.
      * Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.

      * @return True if the 'requirements' field has been set, false otherwise.
      */
    public boolean hasRequirements() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'requirements' field.
      * Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearRequirements() {
      requirements = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hints' field.
      * Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.

      * @return The value.
      */
    public java.util.List<Object> getHints() {
      return hints;
    }


    /**
      * Sets the value of the 'hints' field.
      * Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.

      * @param value The value of 'hints'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setHints(java.util.List<Object> value) {
      validate(fields()[4], value);
      this.hints = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hints' field has been set.
      * Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.

      * @return True if the 'hints' field has been set, false otherwise.
      */
    public boolean hasHints() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hints' field.
      * Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearHints() {
      hints = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * A short, human-readable label of this process object.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }


    /**
      * Sets the value of the 'label' field.
      * A short, human-readable label of this process object.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.label = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * A short, human-readable label of this process object.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'label' field.
      * A short, human-readable label of this process object.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearLabel() {
      label = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'doc' field.
      * A long, human-readable description of this process object.
      * @return The value.
      */
    public java.lang.CharSequence getDoc() {
      return doc;
    }


    /**
      * Sets the value of the 'doc' field.
      * A long, human-readable description of this process object.
      * @param value The value of 'doc'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setDoc(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.doc = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'doc' field has been set.
      * A long, human-readable description of this process object.
      * @return True if the 'doc' field has been set, false otherwise.
      */
    public boolean hasDoc() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'doc' field.
      * A long, human-readable description of this process object.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearDoc() {
      doc = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'cwlVersion' field.
      * CWL document version. Always required at the document root. Not
required for a Process embedded inside another Process.

      * @return The value.
      */
    public io.cwl.avro.CWLVersion getCwlVersion() {
      return cwlVersion;
    }


    /**
      * Sets the value of the 'cwlVersion' field.
      * CWL document version. Always required at the document root. Not
required for a Process embedded inside another Process.

      * @param value The value of 'cwlVersion'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setCwlVersion(io.cwl.avro.CWLVersion value) {
      validate(fields()[7], value);
      this.cwlVersion = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'cwlVersion' field has been set.
      * CWL document version. Always required at the document root. Not
required for a Process embedded inside another Process.

      * @return True if the 'cwlVersion' field has been set, false otherwise.
      */
    public boolean hasCwlVersion() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'cwlVersion' field.
      * CWL document version. Always required at the document root. Not
required for a Process embedded inside another Process.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearCwlVersion() {
      cwlVersion = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'class$' field.
      * @return The value.
      */
    public java.lang.CharSequence getClass$() {
      return class$;
    }


    /**
      * Sets the value of the 'class$' field.
      * @param value The value of 'class$'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.class$ = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'class$' field has been set.
      * @return True if the 'class$' field has been set, false otherwise.
      */
    public boolean hasClass$() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'class$' field.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseCommand' field.
      * Specifies the program to execute.  If an array, the first element of
the array is the command to execute, and subsequent elements are
mandatory command line arguments.  The elements in `baseCommand` must
appear before any command line bindings from `inputBinding` or
`arguments`.

If `baseCommand` is not provided or is an empty array, the first
element of the command line produced after processing `inputBinding` or
`arguments` must be used as the program to execute.

If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.

      * @return The value.
      */
    public java.lang.Object getBaseCommand() {
      return baseCommand;
    }


    /**
      * Sets the value of the 'baseCommand' field.
      * Specifies the program to execute.  If an array, the first element of
the array is the command to execute, and subsequent elements are
mandatory command line arguments.  The elements in `baseCommand` must
appear before any command line bindings from `inputBinding` or
`arguments`.

If `baseCommand` is not provided or is an empty array, the first
element of the command line produced after processing `inputBinding` or
`arguments` must be used as the program to execute.

If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.

      * @param value The value of 'baseCommand'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setBaseCommand(java.lang.Object value) {
      validate(fields()[9], value);
      this.baseCommand = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'baseCommand' field has been set.
      * Specifies the program to execute.  If an array, the first element of
the array is the command to execute, and subsequent elements are
mandatory command line arguments.  The elements in `baseCommand` must
appear before any command line bindings from `inputBinding` or
`arguments`.

If `baseCommand` is not provided or is an empty array, the first
element of the command line produced after processing `inputBinding` or
`arguments` must be used as the program to execute.

If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.

      * @return True if the 'baseCommand' field has been set, false otherwise.
      */
    public boolean hasBaseCommand() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'baseCommand' field.
      * Specifies the program to execute.  If an array, the first element of
the array is the command to execute, and subsequent elements are
mandatory command line arguments.  The elements in `baseCommand` must
appear before any command line bindings from `inputBinding` or
`arguments`.

If `baseCommand` is not provided or is an empty array, the first
element of the command line produced after processing `inputBinding` or
`arguments` must be used as the program to execute.

If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearBaseCommand() {
      baseCommand = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'arguments' field.
      * Command line bindings which are not directly associated with input parameters.

      * @return The value.
      */
    public java.util.List<java.lang.Object> getArguments() {
      return arguments;
    }


    /**
      * Sets the value of the 'arguments' field.
      * Command line bindings which are not directly associated with input parameters.

      * @param value The value of 'arguments'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setArguments(java.util.List<java.lang.Object> value) {
      validate(fields()[10], value);
      this.arguments = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'arguments' field has been set.
      * Command line bindings which are not directly associated with input parameters.

      * @return True if the 'arguments' field has been set, false otherwise.
      */
    public boolean hasArguments() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'arguments' field.
      * Command line bindings which are not directly associated with input parameters.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearArguments() {
      arguments = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'stdin' field.
      * A path to a file whose contents must be piped into the command's
standard input stream.

      * @return The value.
      */
    public java.lang.Object getStdin() {
      return stdin;
    }


    /**
      * Sets the value of the 'stdin' field.
      * A path to a file whose contents must be piped into the command's
standard input stream.

      * @param value The value of 'stdin'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setStdin(java.lang.Object value) {
      validate(fields()[11], value);
      this.stdin = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'stdin' field has been set.
      * A path to a file whose contents must be piped into the command's
standard input stream.

      * @return True if the 'stdin' field has been set, false otherwise.
      */
    public boolean hasStdin() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'stdin' field.
      * A path to a file whose contents must be piped into the command's
standard input stream.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearStdin() {
      stdin = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'stderr' field.
      * Capture the command's standard error stream to a file written to
the designated output directory.

If `stderr` is a string, it specifies the file name to use.

If `stderr` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stderr.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

      * @return The value.
      */
    public java.lang.Object getStderr() {
      return stderr;
    }


    /**
      * Sets the value of the 'stderr' field.
      * Capture the command's standard error stream to a file written to
the designated output directory.

If `stderr` is a string, it specifies the file name to use.

If `stderr` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stderr.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

      * @param value The value of 'stderr'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setStderr(java.lang.Object value) {
      validate(fields()[12], value);
      this.stderr = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'stderr' field has been set.
      * Capture the command's standard error stream to a file written to
the designated output directory.

If `stderr` is a string, it specifies the file name to use.

If `stderr` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stderr.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

      * @return True if the 'stderr' field has been set, false otherwise.
      */
    public boolean hasStderr() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'stderr' field.
      * Capture the command's standard error stream to a file written to
the designated output directory.

If `stderr` is a string, it specifies the file name to use.

If `stderr` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stderr.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearStderr() {
      stderr = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'stdout' field.
      * Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

      * @return The value.
      */
    public java.lang.Object getStdout() {
      return stdout;
    }


    /**
      * Sets the value of the 'stdout' field.
      * Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

      * @param value The value of 'stdout'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setStdout(java.lang.Object value) {
      validate(fields()[13], value);
      this.stdout = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'stdout' field has been set.
      * Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

      * @return True if the 'stdout' field has been set, false otherwise.
      */
    public boolean hasStdout() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'stdout' field.
      * Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearStdout() {
      stdout = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'successCodes' field.
      * Exit codes that indicate the process completed successfully.

      * @return The value.
      */
    public java.util.List<java.lang.Integer> getSuccessCodes() {
      return successCodes;
    }


    /**
      * Sets the value of the 'successCodes' field.
      * Exit codes that indicate the process completed successfully.

      * @param value The value of 'successCodes'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setSuccessCodes(java.util.List<java.lang.Integer> value) {
      validate(fields()[14], value);
      this.successCodes = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'successCodes' field has been set.
      * Exit codes that indicate the process completed successfully.

      * @return True if the 'successCodes' field has been set, false otherwise.
      */
    public boolean hasSuccessCodes() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'successCodes' field.
      * Exit codes that indicate the process completed successfully.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearSuccessCodes() {
      successCodes = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'temporaryFailCodes' field.
      * Exit codes that indicate the process failed due to a possibly
temporary condition, where executing the process with the same
runtime environment and inputs may produce different results.

      * @return The value.
      */
    public java.util.List<java.lang.Integer> getTemporaryFailCodes() {
      return temporaryFailCodes;
    }


    /**
      * Sets the value of the 'temporaryFailCodes' field.
      * Exit codes that indicate the process failed due to a possibly
temporary condition, where executing the process with the same
runtime environment and inputs may produce different results.

      * @param value The value of 'temporaryFailCodes'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setTemporaryFailCodes(java.util.List<java.lang.Integer> value) {
      validate(fields()[15], value);
      this.temporaryFailCodes = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'temporaryFailCodes' field has been set.
      * Exit codes that indicate the process failed due to a possibly
temporary condition, where executing the process with the same
runtime environment and inputs may produce different results.

      * @return True if the 'temporaryFailCodes' field has been set, false otherwise.
      */
    public boolean hasTemporaryFailCodes() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'temporaryFailCodes' field.
      * Exit codes that indicate the process failed due to a possibly
temporary condition, where executing the process with the same
runtime environment and inputs may produce different results.

      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearTemporaryFailCodes() {
      temporaryFailCodes = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'permanentFailCodes' field.
      * Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getPermanentFailCodes() {
      return permanentFailCodes;
    }


    /**
      * Sets the value of the 'permanentFailCodes' field.
      * Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.
      * @param value The value of 'permanentFailCodes'.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder setPermanentFailCodes(java.util.List<java.lang.Integer> value) {
      validate(fields()[16], value);
      this.permanentFailCodes = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'permanentFailCodes' field has been set.
      * Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.
      * @return True if the 'permanentFailCodes' field has been set, false otherwise.
      */
    public boolean hasPermanentFailCodes() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'permanentFailCodes' field.
      * Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.
      * @return This builder.
      */
    public io.cwl.avro.CommandLineTool.Builder clearPermanentFailCodes() {
      permanentFailCodes = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CommandLineTool build() {
      try {
        CommandLineTool record = new CommandLineTool();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.inputs = fieldSetFlags()[1] ? this.inputs : (java.util.List<io.cwl.avro.CommandInputParameter>) defaultValue(fields()[1]);
        record.outputs = fieldSetFlags()[2] ? this.outputs : (java.util.List<io.cwl.avro.CommandOutputParameter>) defaultValue(fields()[2]);
        record.requirements = fieldSetFlags()[3] ? this.requirements : (java.util.List<java.lang.Object>) defaultValue(fields()[3]);
        record.hints = fieldSetFlags()[4] ? this.hints : (java.util.List<Object>) defaultValue(fields()[4]);
        record.label = fieldSetFlags()[5] ? this.label : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.doc = fieldSetFlags()[6] ? this.doc : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.cwlVersion = fieldSetFlags()[7] ? this.cwlVersion : (io.cwl.avro.CWLVersion) defaultValue(fields()[7]);
        record.class$ = fieldSetFlags()[8] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.baseCommand = fieldSetFlags()[9] ? this.baseCommand :  defaultValue(fields()[9]);
        record.arguments = fieldSetFlags()[10] ? this.arguments : (java.util.List<java.lang.Object>) defaultValue(fields()[10]);
        record.stdin = fieldSetFlags()[11] ? this.stdin :  defaultValue(fields()[11]);
        record.stderr = fieldSetFlags()[12] ? this.stderr :  defaultValue(fields()[12]);
        record.stdout = fieldSetFlags()[13] ? this.stdout :  defaultValue(fields()[13]);
        record.successCodes = fieldSetFlags()[14] ? this.successCodes : (java.util.List<java.lang.Integer>) defaultValue(fields()[14]);
        record.temporaryFailCodes = fieldSetFlags()[15] ? this.temporaryFailCodes : (java.util.List<java.lang.Integer>) defaultValue(fields()[15]);
        record.permanentFailCodes = fieldSetFlags()[16] ? this.permanentFailCodes : (java.util.List<java.lang.Integer>) defaultValue(fields()[16]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CommandLineTool>
    WRITER$ = (org.apache.avro.io.DatumWriter<CommandLineTool>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CommandLineTool>
    READER$ = (org.apache.avro.io.DatumReader<CommandLineTool>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










