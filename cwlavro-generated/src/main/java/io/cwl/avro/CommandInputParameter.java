/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cwl.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** An input parameter for a CommandLineTool. */
@org.apache.avro.specific.AvroGenerated
public class CommandInputParameter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7299291540573787195L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommandInputParameter\",\"namespace\":\"io.cwl.avro\",\"doc\":\"An input parameter for a CommandLineTool.\",\"fields\":[{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"'Expression' is not a real type.  It indicates that a field must allow\\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\\nis declared and supported by the platform, the field must also allow\\nJavascript expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"]},{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nProvides a pattern or expression specifying files or directories that\\nmust be included alongside the primary file.  All listed secondary\\nfiles must be present.  An implementation may fail workflow execution\\nif an expected secondary file does not exist.\\n\\nIf the value is an expression, the value of `self` in the expression\\nmust be the primary input or output File object to which this binding\\napplies.  The `basename`, `nameroot` and `nameext` fields must be\\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\\nalso be present.  The expression must return a filename string relative\\nto the path to the primary File, a File or Directory object with either\\n`path` or `location` and `basename` fields set, or an array consisting\\nof strings or File or Directory objects.  It is legal to reference an\\nunchanged File or Directory object taken from input as a secondaryFile.\\n\\nTo work on non-filename-preserving storage systems, portable tool\\ndescriptions should avoid constructing new values from `location`, but\\nshould construct relative references using `basename` or `nameroot`\\ninstead.\\n\\nIf a value in `secondaryFiles` is a string that is not an expression,\\nit specifies that the following pattern should be applied to the path\\nof the primary file to yield a filename relative to the primary File:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"streamable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nA value of `true` indicates that the file is read or written\\nsequentially without seeking.  An implementation may use this flag to\\nindicate whether it is valid to stream file contents using a named\\npipe.  Default: `false`.\\n\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A documentation string for this type, or an array of strings which should be concatenated.\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The unique identifier for this parameter object.\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"},{\"name\":\"format\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"},\"Expression\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nThis must be one or more IRIs of concept nodes\\nthat represents file formats which are allowed as input to this\\nparameter, preferrably defined within an ontology.  If no ontology is\\navailable, file formats may be tested by exact match.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#format\",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"},{\"name\":\"inputBinding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CommandLineBinding\",\"doc\":\"\\nWhen listed under `inputBinding` in the input schema, the term\\n\\\"value\\\" refers to the the corresponding value in the input object.  For\\nbinding objects listed in `CommandLineTool.arguments`, the term \\\"value\\\"\\nrefers to the effective value after evaluating `valueFrom`.\\n\\nThe binding behavior when building the command line depends on the data\\ntype of the value.  If there is a mismatch between the type described by\\nthe input schema and the effective value, such as resulting from an\\nexpression evaluation, an implementation must use the data type of the\\neffective value.\\n\\n  - **string**: Add `prefix` and the string to the command line.\\n\\n  - **number**: Add `prefix` and decimal representation to command line.\\n\\n  - **boolean**: If true, add `prefix` to the command line.  If false, add\\n      nothing.\\n\\n  - **File**: Add `prefix` and the value of\\n    [`File.path`](#File) to the command line.\\n\\n  - **Directory**: Add `prefix` and the value of\\n    [`Directory.path`](#Directory) to the command line.\\n\\n  - **array**: If `itemSeparator` is specified, add `prefix` and the join\\n      the array into a single string with `itemSeparator` separating the\\n      items.  Otherwise first add `prefix`, then recursively process\\n      individual elements.\\n      If the array is empty, it does not add anything to command line.\\n\\n  - **object**: Add `prefix` only, and recursively add object fields for\\n      which `inputBinding` is specified.\\n\\n  - **null**: Add nothing.\\n\",\"fields\":[{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nRead up to the first 64 KiB of text from the file and place it in the\\n\\\"contents\\\" field of the file object for use by expressions.\\n\",\"jsonldPredicate\":\"cwl:loadContents\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputBinding\"},{\"name\":\"position\",\"type\":[\"null\",\"int\"],\"doc\":\"The sorting key.  Default position is 0.\"},{\"name\":\"prefix\",\"type\":[\"null\",\"string\"],\"doc\":\"Command line prefix to add before the value.\"},{\"name\":\"separate\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true (default), then the prefix and value must be added as separate\\ncommand line arguments; if false, prefix and value must be concatenated\\ninto a single command line argument.\\n\"},{\"name\":\"itemSeparator\",\"type\":[\"null\",\"string\"],\"doc\":\"Join the array elements into a single string with the elements\\nseparated by by `itemSeparator`.\\n\"},{\"name\":\"valueFrom\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"If `valueFrom` is a constant string value, use this as the value and\\napply the binding rules above.\\n\\nIf `valueFrom` is an expression, evaluate the expression to yield the\\nactual value to use to build the command line and apply the binding\\nrules above.  If the inputBinding is associated with an input\\nparameter, the value of `self` in the expression will be the value of\\nthe input parameter.  Input parameter defaults (as specified by the\\n`InputParameter.default` field) must be applied before evaluating the\\nexpression.\\n\\nWhen a binding is part of the `CommandLineTool.arguments` field,\\nthe `valueFrom` field is required.\\n\",\"jsonldPredicate\":\"cwl:valueFrom\"},{\"name\":\"shellQuote\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If `ShellCommandRequirement` is in the requirements for the current command,\\nthis controls whether the value is quoted on the command line (default is true).\\nUse `shellQuote: false` to inject metacharacters for operations such as pipes.\\n\\nIf `shellQuote` is true or not provided, the implementation must not\\npermit interpretation of any shell metacharacters or directives.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputBinding\"}],\"doc\":\"Describes how to handle the inputs of a process and convert them\\ninto a concrete form for execution, such as command line parameters.\\n\",\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"},{\"name\":\"default\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"FunkyObject\",\"doc\":\"The **FunkyObject** type validates for any non-null value.\\n\",\"symbols\":[\"FunkyObject\"],\"docAfter\":\"https://w3id.org/cwl/salad#PrimitiveType\"}],\"doc\":\"The default value to use"," for this parameter if the parameter is missing\\nfrom the input object, or if the value of the parameter in the input\\nobject is `null`.  Default values are applied before evaluating expressions\\n(e.g. dependent `valueFrom` fields).\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#default\",\"noLinkCheck\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"CWLType\",\"symbols\":[\"null\",\"boolean\",\"int\",\"long\",\"float\",\"double\",\"string\",\"File\",\"Directory\"],\"extends\":\"https://w3id.org/cwl/salad#PrimitiveType\"},{\"type\":\"record\",\"name\":\"CommandInputRecordSchema\",\"fields\":[{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommandInputRecordField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"type\",\"type\":[\"CWLType\",\"CommandInputRecordSchema\",{\"type\":\"record\",\"name\":\"CommandInputEnumSchema\",\"fields\":[{\"name\":\"symbols\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"_type\":\"@id\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Enum_symbol\",\"namespace\":\"io.cwl.avro.EnumSchemaPackage.type\",\"symbols\":[\"enum\"]},\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputEnumSchema\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputEnumSchema\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]},{\"type\":\"record\",\"name\":\"CommandInputArraySchema\",\"fields\":[{\"name\":\"items\",\"type\":[\"CWLType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#items\",\"_type\":\"@vocab\",\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Array_symbol\",\"namespace\":\"io.cwl.avro.ArraySchemaPackage.type\",\"symbols\":[\"array\"]},\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputArraySchema\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]},\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputRecordField\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this process object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputRecordField\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputRecordField\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#fields\",\"mapSubject\":\"name\",\"mapPredicate\":\"type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Record_symbol\",\"namespace\":\"io.cwl.avro.RecordSchemaPackage.type\",\"symbols\":[\"record\"]},\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"typeDSL\":true,\"refScope\":2},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputRecordSchema\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordField\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordField\"}]},\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\"]}],\"doc\":\"Specify valid types of data that may be assigned to this parameter.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/salad#type\",\"_type\":\"@vocab\",\"refScope\":2,\"typeDSL\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"}],\"extends\":\"https://w3id.org/cwl/cwl#InputParameter\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputBinding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CommandInputParameter> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CommandInputParameter> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CommandInputParameter> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CommandInputParameter> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CommandInputParameter> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CommandInputParameter to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CommandInputParameter from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CommandInputParameter instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CommandInputParameter fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** A short, human-readable label of this object. */
  private java.lang.CharSequence label;
  /** Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.
 */
  private java.lang.Object secondaryFiles;
  /** Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.
 */
  private java.lang.Boolean streamable;
  /** A documentation string for this type, or an array of strings which should be concatenated. */
  private java.lang.Object doc;
  /** The unique identifier for this parameter object. */
  private java.lang.CharSequence id;
  /** Only valid when `type: File` or is an array of `items: File`.

This must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.
 */
  private java.lang.Object format;
  /** Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.
 */
  private io.cwl.avro.CommandLineBinding inputBinding;
  /** The default value to use for this parameter if the parameter is missing
from the input object, or if the value of the parameter in the input
object is `null`.  Default values are applied before evaluating expressions
(e.g. dependent `valueFrom` fields).
 */
  private io.cwl.avro.FunkyObject default$;
  /** Specify valid types of data that may be assigned to this parameter.
 */
  private java.lang.Object type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommandInputParameter() {}

  /**
   * All-args constructor.
   * @param label A short, human-readable label of this object.
   * @param secondaryFiles Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

   * @param streamable Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

   * @param doc A documentation string for this type, or an array of strings which should be concatenated.
   * @param id The unique identifier for this parameter object.
   * @param format Only valid when `type: File` or is an array of `items: File`.

This must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

   * @param inputBinding Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

   * @param default$ The default value to use for this parameter if the parameter is missing
from the input object, or if the value of the parameter in the input
object is `null`.  Default values are applied before evaluating expressions
(e.g. dependent `valueFrom` fields).

   * @param type Specify valid types of data that may be assigned to this parameter.

   */
  public CommandInputParameter(java.lang.CharSequence label, java.lang.Object secondaryFiles, java.lang.Boolean streamable, java.lang.Object doc, java.lang.CharSequence id, java.lang.Object format, io.cwl.avro.CommandLineBinding inputBinding, io.cwl.avro.FunkyObject default$, java.lang.Object type) {
    this.label = label;
    this.secondaryFiles = secondaryFiles;
    this.streamable = streamable;
    this.doc = doc;
    this.id = id;
    this.format = format;
    this.inputBinding = inputBinding;
    this.default$ = default$;
    this.type = type;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return label;
    case 1: return secondaryFiles;
    case 2: return streamable;
    case 3: return doc;
    case 4: return id;
    case 5: return format;
    case 6: return inputBinding;
    case 7: return default$;
    case 8: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: label = (java.lang.CharSequence)value$; break;
    case 1: secondaryFiles = value$; break;
    case 2: streamable = (java.lang.Boolean)value$; break;
    case 3: doc = value$; break;
    case 4: id = (java.lang.CharSequence)value$; break;
    case 5: format = value$; break;
    case 6: inputBinding = (io.cwl.avro.CommandLineBinding)value$; break;
    case 7: default$ = (io.cwl.avro.FunkyObject)value$; break;
    case 8: type = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'label' field.
   * @return A short, human-readable label of this object.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }


  /**
   * Sets the value of the 'label' field.
   * A short, human-readable label of this object.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'secondaryFiles' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

   */
  public java.lang.Object getSecondaryFiles() {
    return secondaryFiles;
  }


  /**
   * Sets the value of the 'secondaryFiles' field.
   * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

   * @param value the value to set.
   */
  public void setSecondaryFiles(java.lang.Object value) {
    this.secondaryFiles = value;
  }

  /**
   * Gets the value of the 'streamable' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

   */
  public java.lang.Boolean getStreamable() {
    return streamable;
  }


  /**
   * Sets the value of the 'streamable' field.
   * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

   * @param value the value to set.
   */
  public void setStreamable(java.lang.Boolean value) {
    this.streamable = value;
  }

  /**
   * Gets the value of the 'doc' field.
   * @return A documentation string for this type, or an array of strings which should be concatenated.
   */
  public java.lang.Object getDoc() {
    return doc;
  }


  /**
   * Sets the value of the 'doc' field.
   * A documentation string for this type, or an array of strings which should be concatenated.
   * @param value the value to set.
   */
  public void setDoc(java.lang.Object value) {
    this.doc = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The unique identifier for this parameter object.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * The unique identifier for this parameter object.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'format' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

This must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

   */
  public java.lang.Object getFormat() {
    return format;
  }


  /**
   * Sets the value of the 'format' field.
   * Only valid when `type: File` or is an array of `items: File`.

This must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

   * @param value the value to set.
   */
  public void setFormat(java.lang.Object value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'inputBinding' field.
   * @return Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

   */
  public io.cwl.avro.CommandLineBinding getInputBinding() {
    return inputBinding;
  }


  /**
   * Sets the value of the 'inputBinding' field.
   * Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

   * @param value the value to set.
   */
  public void setInputBinding(io.cwl.avro.CommandLineBinding value) {
    this.inputBinding = value;
  }

  /**
   * Gets the value of the 'default$' field.
   * @return The default value to use for this parameter if the parameter is missing
from the input object, or if the value of the parameter in the input
object is `null`.  Default values are applied before evaluating expressions
(e.g. dependent `valueFrom` fields).

   */
  public io.cwl.avro.FunkyObject getDefault$() {
    return default$;
  }


  /**
   * Sets the value of the 'default$' field.
   * The default value to use for this parameter if the parameter is missing
from the input object, or if the value of the parameter in the input
object is `null`.  Default values are applied before evaluating expressions
(e.g. dependent `valueFrom` fields).

   * @param value the value to set.
   */
  public void setDefault$(io.cwl.avro.FunkyObject value) {
    this.default$ = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Specify valid types of data that may be assigned to this parameter.

   */
  public java.lang.Object getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Specify valid types of data that may be assigned to this parameter.

   * @param value the value to set.
   */
  public void setType(java.lang.Object value) {
    this.type = value;
  }

  /**
   * Creates a new CommandInputParameter RecordBuilder.
   * @return A new CommandInputParameter RecordBuilder
   */
  public static io.cwl.avro.CommandInputParameter.Builder newBuilder() {
    return new io.cwl.avro.CommandInputParameter.Builder();
  }

  /**
   * Creates a new CommandInputParameter RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommandInputParameter RecordBuilder
   */
  public static io.cwl.avro.CommandInputParameter.Builder newBuilder(io.cwl.avro.CommandInputParameter.Builder other) {
    if (other == null) {
      return new io.cwl.avro.CommandInputParameter.Builder();
    } else {
      return new io.cwl.avro.CommandInputParameter.Builder(other);
    }
  }

  /**
   * Creates a new CommandInputParameter RecordBuilder by copying an existing CommandInputParameter instance.
   * @param other The existing instance to copy.
   * @return A new CommandInputParameter RecordBuilder
   */
  public static io.cwl.avro.CommandInputParameter.Builder newBuilder(io.cwl.avro.CommandInputParameter other) {
    if (other == null) {
      return new io.cwl.avro.CommandInputParameter.Builder();
    } else {
      return new io.cwl.avro.CommandInputParameter.Builder(other);
    }
  }

  /**
   * RecordBuilder for CommandInputParameter instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommandInputParameter>
    implements org.apache.avro.data.RecordBuilder<CommandInputParameter> {

    /** A short, human-readable label of this object. */
    private java.lang.CharSequence label;
    /** Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.
 */
    private java.lang.Object secondaryFiles;
    /** Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.
 */
    private java.lang.Boolean streamable;
    /** A documentation string for this type, or an array of strings which should be concatenated. */
    private java.lang.Object doc;
    /** The unique identifier for this parameter object. */
    private java.lang.CharSequence id;
    /** Only valid when `type: File` or is an array of `items: File`.

This must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.
 */
    private java.lang.Object format;
    /** Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.
 */
    private io.cwl.avro.CommandLineBinding inputBinding;
    private io.cwl.avro.CommandLineBinding.Builder inputBindingBuilder;
    /** The default value to use for this parameter if the parameter is missing
from the input object, or if the value of the parameter in the input
object is `null`.  Default values are applied before evaluating expressions
(e.g. dependent `valueFrom` fields).
 */
    private io.cwl.avro.FunkyObject default$;
    /** Specify valid types of data that may be assigned to this parameter.
 */
    private java.lang.Object type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cwl.avro.CommandInputParameter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.secondaryFiles)) {
        this.secondaryFiles = data().deepCopy(fields()[1].schema(), other.secondaryFiles);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.streamable)) {
        this.streamable = data().deepCopy(fields()[2].schema(), other.streamable);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.doc)) {
        this.doc = data().deepCopy(fields()[3].schema(), other.doc);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.id)) {
        this.id = data().deepCopy(fields()[4].schema(), other.id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.format)) {
        this.format = data().deepCopy(fields()[5].schema(), other.format);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.inputBinding)) {
        this.inputBinding = data().deepCopy(fields()[6].schema(), other.inputBinding);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasInputBindingBuilder()) {
        this.inputBindingBuilder = io.cwl.avro.CommandLineBinding.newBuilder(other.getInputBindingBuilder());
      }
      if (isValidValue(fields()[7], other.default$)) {
        this.default$ = data().deepCopy(fields()[7].schema(), other.default$);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing CommandInputParameter instance
     * @param other The existing instance to copy.
     */
    private Builder(io.cwl.avro.CommandInputParameter other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.secondaryFiles)) {
        this.secondaryFiles = data().deepCopy(fields()[1].schema(), other.secondaryFiles);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.streamable)) {
        this.streamable = data().deepCopy(fields()[2].schema(), other.streamable);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.doc)) {
        this.doc = data().deepCopy(fields()[3].schema(), other.doc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.id)) {
        this.id = data().deepCopy(fields()[4].schema(), other.id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.format)) {
        this.format = data().deepCopy(fields()[5].schema(), other.format);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.inputBinding)) {
        this.inputBinding = data().deepCopy(fields()[6].schema(), other.inputBinding);
        fieldSetFlags()[6] = true;
      }
      this.inputBindingBuilder = null;
      if (isValidValue(fields()[7], other.default$)) {
        this.default$ = data().deepCopy(fields()[7].schema(), other.default$);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'label' field.
      * A short, human-readable label of this object.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }


    /**
      * Sets the value of the 'label' field.
      * A short, human-readable label of this object.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.label = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * A short, human-readable label of this object.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'label' field.
      * A short, human-readable label of this object.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder clearLabel() {
      label = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'secondaryFiles' field.
      * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @return The value.
      */
    public java.lang.Object getSecondaryFiles() {
      return secondaryFiles;
    }


    /**
      * Sets the value of the 'secondaryFiles' field.
      * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @param value The value of 'secondaryFiles'.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder setSecondaryFiles(java.lang.Object value) {
      validate(fields()[1], value);
      this.secondaryFiles = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'secondaryFiles' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @return True if the 'secondaryFiles' field has been set, false otherwise.
      */
    public boolean hasSecondaryFiles() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'secondaryFiles' field.
      * Only valid when `type: File` or is an array of `items: File`.

Provides a pattern or expression specifying files or directories that
must be included alongside the primary file.  All listed secondary
files must be present.  An implementation may fail workflow execution
if an expected secondary file does not exist.

If the value is an expression, the value of `self` in the expression
must be the primary input or output File object to which this binding
applies.  The `basename`, `nameroot` and `nameext` fields must be
present in `self`.  For `CommandLineTool` outputs the `path` field must
also be present.  The expression must return a filename string relative
to the path to the primary File, a File or Directory object with either
`path` or `location` and `basename` fields set, or an array consisting
of strings or File or Directory objects.  It is legal to reference an
unchanged File or Directory object taken from input as a secondaryFile.

To work on non-filename-preserving storage systems, portable tool
descriptions should avoid constructing new values from `location`, but
should construct relative references using `basename` or `nameroot`
instead.

If a value in `secondaryFiles` is a string that is not an expression,
it specifies that the following pattern should be applied to the path
of the primary file to yield a filename relative to the primary File:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder clearSecondaryFiles() {
      secondaryFiles = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamable' field.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @return The value.
      */
    public java.lang.Boolean getStreamable() {
      return streamable;
    }


    /**
      * Sets the value of the 'streamable' field.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @param value The value of 'streamable'.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder setStreamable(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.streamable = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'streamable' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @return True if the 'streamable' field has been set, false otherwise.
      */
    public boolean hasStreamable() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'streamable' field.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder clearStreamable() {
      streamable = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'doc' field.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @return The value.
      */
    public java.lang.Object getDoc() {
      return doc;
    }


    /**
      * Sets the value of the 'doc' field.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @param value The value of 'doc'.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder setDoc(java.lang.Object value) {
      validate(fields()[3], value);
      this.doc = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'doc' field has been set.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @return True if the 'doc' field has been set, false otherwise.
      */
    public boolean hasDoc() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'doc' field.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder clearDoc() {
      doc = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * The unique identifier for this parameter object.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * The unique identifier for this parameter object.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder setId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * The unique identifier for this parameter object.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'id' field.
      * The unique identifier for this parameter object.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder clearId() {
      id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'format' field.
      * Only valid when `type: File` or is an array of `items: File`.

This must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

      * @return The value.
      */
    public java.lang.Object getFormat() {
      return format;
    }


    /**
      * Sets the value of the 'format' field.
      * Only valid when `type: File` or is an array of `items: File`.

This must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

      * @param value The value of 'format'.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder setFormat(java.lang.Object value) {
      validate(fields()[5], value);
      this.format = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'format' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

This must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

      * @return True if the 'format' field has been set, false otherwise.
      */
    public boolean hasFormat() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'format' field.
      * Only valid when `type: File` or is an array of `items: File`.

This must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder clearFormat() {
      format = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'inputBinding' field.
      * Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

      * @return The value.
      */
    public io.cwl.avro.CommandLineBinding getInputBinding() {
      return inputBinding;
    }


    /**
      * Sets the value of the 'inputBinding' field.
      * Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

      * @param value The value of 'inputBinding'.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder setInputBinding(io.cwl.avro.CommandLineBinding value) {
      validate(fields()[6], value);
      this.inputBindingBuilder = null;
      this.inputBinding = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'inputBinding' field has been set.
      * Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

      * @return True if the 'inputBinding' field has been set, false otherwise.
      */
    public boolean hasInputBinding() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'inputBinding' field and creates one if it doesn't exist yet.
     * Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

     * @return This builder.
     */
    public io.cwl.avro.CommandLineBinding.Builder getInputBindingBuilder() {
      if (inputBindingBuilder == null) {
        if (hasInputBinding()) {
          setInputBindingBuilder(io.cwl.avro.CommandLineBinding.newBuilder(inputBinding));
        } else {
          setInputBindingBuilder(io.cwl.avro.CommandLineBinding.newBuilder());
        }
      }
      return inputBindingBuilder;
    }

    /**
     * Sets the Builder instance for the 'inputBinding' field
     * Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.cwl.avro.CommandInputParameter.Builder setInputBindingBuilder(io.cwl.avro.CommandLineBinding.Builder value) {
      clearInputBinding();
      inputBindingBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'inputBinding' field has an active Builder instance
     * Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

     * @return True if the 'inputBinding' field has an active Builder instance
     */
    public boolean hasInputBindingBuilder() {
      return inputBindingBuilder != null;
    }

    /**
      * Clears the value of the 'inputBinding' field.
      * Describes how to handle the inputs of a process and convert them
into a concrete form for execution, such as command line parameters.

      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder clearInputBinding() {
      inputBinding = null;
      inputBindingBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'default$' field.
      * The default value to use for this parameter if the parameter is missing
from the input object, or if the value of the parameter in the input
object is `null`.  Default values are applied before evaluating expressions
(e.g. dependent `valueFrom` fields).

      * @return The value.
      */
    public io.cwl.avro.FunkyObject getDefault$() {
      return default$;
    }


    /**
      * Sets the value of the 'default$' field.
      * The default value to use for this parameter if the parameter is missing
from the input object, or if the value of the parameter in the input
object is `null`.  Default values are applied before evaluating expressions
(e.g. dependent `valueFrom` fields).

      * @param value The value of 'default$'.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder setDefault$(io.cwl.avro.FunkyObject value) {
      validate(fields()[7], value);
      this.default$ = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'default$' field has been set.
      * The default value to use for this parameter if the parameter is missing
from the input object, or if the value of the parameter in the input
object is `null`.  Default values are applied before evaluating expressions
(e.g. dependent `valueFrom` fields).

      * @return True if the 'default$' field has been set, false otherwise.
      */
    public boolean hasDefault$() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'default$' field.
      * The default value to use for this parameter if the parameter is missing
from the input object, or if the value of the parameter in the input
object is `null`.  Default values are applied before evaluating expressions
(e.g. dependent `valueFrom` fields).

      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder clearDefault$() {
      default$ = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Specify valid types of data that may be assigned to this parameter.

      * @return The value.
      */
    public java.lang.Object getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Specify valid types of data that may be assigned to this parameter.

      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder setType(java.lang.Object value) {
      validate(fields()[8], value);
      this.type = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Specify valid types of data that may be assigned to this parameter.

      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'type' field.
      * Specify valid types of data that may be assigned to this parameter.

      * @return This builder.
      */
    public io.cwl.avro.CommandInputParameter.Builder clearType() {
      type = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CommandInputParameter build() {
      try {
        CommandInputParameter record = new CommandInputParameter();
        record.label = fieldSetFlags()[0] ? this.label : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.secondaryFiles = fieldSetFlags()[1] ? this.secondaryFiles :  defaultValue(fields()[1]);
        record.streamable = fieldSetFlags()[2] ? this.streamable : (java.lang.Boolean) defaultValue(fields()[2]);
        record.doc = fieldSetFlags()[3] ? this.doc :  defaultValue(fields()[3]);
        record.id = fieldSetFlags()[4] ? this.id : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.format = fieldSetFlags()[5] ? this.format :  defaultValue(fields()[5]);
        if (inputBindingBuilder != null) {
          try {
            record.inputBinding = this.inputBindingBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("inputBinding"));
            throw e;
          }
        } else {
          record.inputBinding = fieldSetFlags()[6] ? this.inputBinding : (io.cwl.avro.CommandLineBinding) defaultValue(fields()[6]);
        }
        record.default$ = fieldSetFlags()[7] ? this.default$ : (io.cwl.avro.FunkyObject) defaultValue(fields()[7]);
        record.type = fieldSetFlags()[8] ? this.type :  defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CommandInputParameter>
    WRITER$ = (org.apache.avro.io.DatumWriter<CommandInputParameter>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CommandInputParameter>
    READER$ = (org.apache.avro.io.DatumReader<CommandInputParameter>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










